
CAN_Nucleo446_to_VESC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a88  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08004c58  08004c58  00014c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d50  08004d50  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004d50  08004d50  00014d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d58  08004d58  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d58  08004d58  00014d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d5c  08004d5c  00014d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000068  08004dc8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08004dc8  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ac97  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bdb  00000000  00000000  0002ad72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008d0  00000000  00000000  0002c950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006b4  00000000  00000000  0002d220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000221b5  00000000  00000000  0002d8d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a7e8  00000000  00000000  0004fa89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc8b0  00000000  00000000  0005a271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002ca0  00000000  00000000  00126b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001297c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004c40 	.word	0x08004c40

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08004c40 	.word	0x08004c40

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	; 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2uiz>:
 800087c:	004a      	lsls	r2, r1, #1
 800087e:	d211      	bcs.n	80008a4 <__aeabi_d2uiz+0x28>
 8000880:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000884:	d211      	bcs.n	80008aa <__aeabi_d2uiz+0x2e>
 8000886:	d50d      	bpl.n	80008a4 <__aeabi_d2uiz+0x28>
 8000888:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800088c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000890:	d40e      	bmi.n	80008b0 <__aeabi_d2uiz+0x34>
 8000892:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000896:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800089a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800089e:	fa23 f002 	lsr.w	r0, r3, r2
 80008a2:	4770      	bx	lr
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	4770      	bx	lr
 80008aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008ae:	d102      	bne.n	80008b6 <__aeabi_d2uiz+0x3a>
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008b4:	4770      	bx	lr
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	4770      	bx	lr

080008bc <__aeabi_uldivmod>:
 80008bc:	b953      	cbnz	r3, 80008d4 <__aeabi_uldivmod+0x18>
 80008be:	b94a      	cbnz	r2, 80008d4 <__aeabi_uldivmod+0x18>
 80008c0:	2900      	cmp	r1, #0
 80008c2:	bf08      	it	eq
 80008c4:	2800      	cmpeq	r0, #0
 80008c6:	bf1c      	itt	ne
 80008c8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80008cc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008d0:	f000 b970 	b.w	8000bb4 <__aeabi_idiv0>
 80008d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008dc:	f000 f806 	bl	80008ec <__udivmoddi4>
 80008e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e8:	b004      	add	sp, #16
 80008ea:	4770      	bx	lr

080008ec <__udivmoddi4>:
 80008ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008f0:	9e08      	ldr	r6, [sp, #32]
 80008f2:	460d      	mov	r5, r1
 80008f4:	4604      	mov	r4, r0
 80008f6:	460f      	mov	r7, r1
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d14a      	bne.n	8000992 <__udivmoddi4+0xa6>
 80008fc:	428a      	cmp	r2, r1
 80008fe:	4694      	mov	ip, r2
 8000900:	d965      	bls.n	80009ce <__udivmoddi4+0xe2>
 8000902:	fab2 f382 	clz	r3, r2
 8000906:	b143      	cbz	r3, 800091a <__udivmoddi4+0x2e>
 8000908:	fa02 fc03 	lsl.w	ip, r2, r3
 800090c:	f1c3 0220 	rsb	r2, r3, #32
 8000910:	409f      	lsls	r7, r3
 8000912:	fa20 f202 	lsr.w	r2, r0, r2
 8000916:	4317      	orrs	r7, r2
 8000918:	409c      	lsls	r4, r3
 800091a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800091e:	fa1f f58c 	uxth.w	r5, ip
 8000922:	fbb7 f1fe 	udiv	r1, r7, lr
 8000926:	0c22      	lsrs	r2, r4, #16
 8000928:	fb0e 7711 	mls	r7, lr, r1, r7
 800092c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000930:	fb01 f005 	mul.w	r0, r1, r5
 8000934:	4290      	cmp	r0, r2
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x62>
 8000938:	eb1c 0202 	adds.w	r2, ip, r2
 800093c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000940:	f080 811c 	bcs.w	8000b7c <__udivmoddi4+0x290>
 8000944:	4290      	cmp	r0, r2
 8000946:	f240 8119 	bls.w	8000b7c <__udivmoddi4+0x290>
 800094a:	3902      	subs	r1, #2
 800094c:	4462      	add	r2, ip
 800094e:	1a12      	subs	r2, r2, r0
 8000950:	b2a4      	uxth	r4, r4
 8000952:	fbb2 f0fe 	udiv	r0, r2, lr
 8000956:	fb0e 2210 	mls	r2, lr, r0, r2
 800095a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800095e:	fb00 f505 	mul.w	r5, r0, r5
 8000962:	42a5      	cmp	r5, r4
 8000964:	d90a      	bls.n	800097c <__udivmoddi4+0x90>
 8000966:	eb1c 0404 	adds.w	r4, ip, r4
 800096a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800096e:	f080 8107 	bcs.w	8000b80 <__udivmoddi4+0x294>
 8000972:	42a5      	cmp	r5, r4
 8000974:	f240 8104 	bls.w	8000b80 <__udivmoddi4+0x294>
 8000978:	4464      	add	r4, ip
 800097a:	3802      	subs	r0, #2
 800097c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000980:	1b64      	subs	r4, r4, r5
 8000982:	2100      	movs	r1, #0
 8000984:	b11e      	cbz	r6, 800098e <__udivmoddi4+0xa2>
 8000986:	40dc      	lsrs	r4, r3
 8000988:	2300      	movs	r3, #0
 800098a:	e9c6 4300 	strd	r4, r3, [r6]
 800098e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000992:	428b      	cmp	r3, r1
 8000994:	d908      	bls.n	80009a8 <__udivmoddi4+0xbc>
 8000996:	2e00      	cmp	r6, #0
 8000998:	f000 80ed 	beq.w	8000b76 <__udivmoddi4+0x28a>
 800099c:	2100      	movs	r1, #0
 800099e:	e9c6 0500 	strd	r0, r5, [r6]
 80009a2:	4608      	mov	r0, r1
 80009a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a8:	fab3 f183 	clz	r1, r3
 80009ac:	2900      	cmp	r1, #0
 80009ae:	d149      	bne.n	8000a44 <__udivmoddi4+0x158>
 80009b0:	42ab      	cmp	r3, r5
 80009b2:	d302      	bcc.n	80009ba <__udivmoddi4+0xce>
 80009b4:	4282      	cmp	r2, r0
 80009b6:	f200 80f8 	bhi.w	8000baa <__udivmoddi4+0x2be>
 80009ba:	1a84      	subs	r4, r0, r2
 80009bc:	eb65 0203 	sbc.w	r2, r5, r3
 80009c0:	2001      	movs	r0, #1
 80009c2:	4617      	mov	r7, r2
 80009c4:	2e00      	cmp	r6, #0
 80009c6:	d0e2      	beq.n	800098e <__udivmoddi4+0xa2>
 80009c8:	e9c6 4700 	strd	r4, r7, [r6]
 80009cc:	e7df      	b.n	800098e <__udivmoddi4+0xa2>
 80009ce:	b902      	cbnz	r2, 80009d2 <__udivmoddi4+0xe6>
 80009d0:	deff      	udf	#255	; 0xff
 80009d2:	fab2 f382 	clz	r3, r2
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	f040 8090 	bne.w	8000afc <__udivmoddi4+0x210>
 80009dc:	1a8a      	subs	r2, r1, r2
 80009de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009e2:	fa1f fe8c 	uxth.w	lr, ip
 80009e6:	2101      	movs	r1, #1
 80009e8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009ec:	fb07 2015 	mls	r0, r7, r5, r2
 80009f0:	0c22      	lsrs	r2, r4, #16
 80009f2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009f6:	fb0e f005 	mul.w	r0, lr, r5
 80009fa:	4290      	cmp	r0, r2
 80009fc:	d908      	bls.n	8000a10 <__udivmoddi4+0x124>
 80009fe:	eb1c 0202 	adds.w	r2, ip, r2
 8000a02:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000a06:	d202      	bcs.n	8000a0e <__udivmoddi4+0x122>
 8000a08:	4290      	cmp	r0, r2
 8000a0a:	f200 80cb 	bhi.w	8000ba4 <__udivmoddi4+0x2b8>
 8000a0e:	4645      	mov	r5, r8
 8000a10:	1a12      	subs	r2, r2, r0
 8000a12:	b2a4      	uxth	r4, r4
 8000a14:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a18:	fb07 2210 	mls	r2, r7, r0, r2
 8000a1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a20:	fb0e fe00 	mul.w	lr, lr, r0
 8000a24:	45a6      	cmp	lr, r4
 8000a26:	d908      	bls.n	8000a3a <__udivmoddi4+0x14e>
 8000a28:	eb1c 0404 	adds.w	r4, ip, r4
 8000a2c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000a30:	d202      	bcs.n	8000a38 <__udivmoddi4+0x14c>
 8000a32:	45a6      	cmp	lr, r4
 8000a34:	f200 80bb 	bhi.w	8000bae <__udivmoddi4+0x2c2>
 8000a38:	4610      	mov	r0, r2
 8000a3a:	eba4 040e 	sub.w	r4, r4, lr
 8000a3e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a42:	e79f      	b.n	8000984 <__udivmoddi4+0x98>
 8000a44:	f1c1 0720 	rsb	r7, r1, #32
 8000a48:	408b      	lsls	r3, r1
 8000a4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a52:	fa05 f401 	lsl.w	r4, r5, r1
 8000a56:	fa20 f307 	lsr.w	r3, r0, r7
 8000a5a:	40fd      	lsrs	r5, r7
 8000a5c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a60:	4323      	orrs	r3, r4
 8000a62:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a66:	fa1f fe8c 	uxth.w	lr, ip
 8000a6a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a6e:	0c1c      	lsrs	r4, r3, #16
 8000a70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a74:	fb08 f50e 	mul.w	r5, r8, lr
 8000a78:	42a5      	cmp	r5, r4
 8000a7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a7e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a82:	d90b      	bls.n	8000a9c <__udivmoddi4+0x1b0>
 8000a84:	eb1c 0404 	adds.w	r4, ip, r4
 8000a88:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000a8c:	f080 8088 	bcs.w	8000ba0 <__udivmoddi4+0x2b4>
 8000a90:	42a5      	cmp	r5, r4
 8000a92:	f240 8085 	bls.w	8000ba0 <__udivmoddi4+0x2b4>
 8000a96:	f1a8 0802 	sub.w	r8, r8, #2
 8000a9a:	4464      	add	r4, ip
 8000a9c:	1b64      	subs	r4, r4, r5
 8000a9e:	b29d      	uxth	r5, r3
 8000aa0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000aa4:	fb09 4413 	mls	r4, r9, r3, r4
 8000aa8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000aac:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ab0:	45a6      	cmp	lr, r4
 8000ab2:	d908      	bls.n	8000ac6 <__udivmoddi4+0x1da>
 8000ab4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000abc:	d26c      	bcs.n	8000b98 <__udivmoddi4+0x2ac>
 8000abe:	45a6      	cmp	lr, r4
 8000ac0:	d96a      	bls.n	8000b98 <__udivmoddi4+0x2ac>
 8000ac2:	3b02      	subs	r3, #2
 8000ac4:	4464      	add	r4, ip
 8000ac6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aca:	fba3 9502 	umull	r9, r5, r3, r2
 8000ace:	eba4 040e 	sub.w	r4, r4, lr
 8000ad2:	42ac      	cmp	r4, r5
 8000ad4:	46c8      	mov	r8, r9
 8000ad6:	46ae      	mov	lr, r5
 8000ad8:	d356      	bcc.n	8000b88 <__udivmoddi4+0x29c>
 8000ada:	d053      	beq.n	8000b84 <__udivmoddi4+0x298>
 8000adc:	b156      	cbz	r6, 8000af4 <__udivmoddi4+0x208>
 8000ade:	ebb0 0208 	subs.w	r2, r0, r8
 8000ae2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ae6:	fa04 f707 	lsl.w	r7, r4, r7
 8000aea:	40ca      	lsrs	r2, r1
 8000aec:	40cc      	lsrs	r4, r1
 8000aee:	4317      	orrs	r7, r2
 8000af0:	e9c6 7400 	strd	r7, r4, [r6]
 8000af4:	4618      	mov	r0, r3
 8000af6:	2100      	movs	r1, #0
 8000af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afc:	f1c3 0120 	rsb	r1, r3, #32
 8000b00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b04:	fa20 f201 	lsr.w	r2, r0, r1
 8000b08:	fa25 f101 	lsr.w	r1, r5, r1
 8000b0c:	409d      	lsls	r5, r3
 8000b0e:	432a      	orrs	r2, r5
 8000b10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b14:	fa1f fe8c 	uxth.w	lr, ip
 8000b18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b1c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b20:	0c11      	lsrs	r1, r2, #16
 8000b22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b26:	fb00 f50e 	mul.w	r5, r0, lr
 8000b2a:	428d      	cmp	r5, r1
 8000b2c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b30:	d908      	bls.n	8000b44 <__udivmoddi4+0x258>
 8000b32:	eb1c 0101 	adds.w	r1, ip, r1
 8000b36:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000b3a:	d22f      	bcs.n	8000b9c <__udivmoddi4+0x2b0>
 8000b3c:	428d      	cmp	r5, r1
 8000b3e:	d92d      	bls.n	8000b9c <__udivmoddi4+0x2b0>
 8000b40:	3802      	subs	r0, #2
 8000b42:	4461      	add	r1, ip
 8000b44:	1b49      	subs	r1, r1, r5
 8000b46:	b292      	uxth	r2, r2
 8000b48:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b4c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b54:	fb05 f10e 	mul.w	r1, r5, lr
 8000b58:	4291      	cmp	r1, r2
 8000b5a:	d908      	bls.n	8000b6e <__udivmoddi4+0x282>
 8000b5c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b60:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000b64:	d216      	bcs.n	8000b94 <__udivmoddi4+0x2a8>
 8000b66:	4291      	cmp	r1, r2
 8000b68:	d914      	bls.n	8000b94 <__udivmoddi4+0x2a8>
 8000b6a:	3d02      	subs	r5, #2
 8000b6c:	4462      	add	r2, ip
 8000b6e:	1a52      	subs	r2, r2, r1
 8000b70:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b74:	e738      	b.n	80009e8 <__udivmoddi4+0xfc>
 8000b76:	4631      	mov	r1, r6
 8000b78:	4630      	mov	r0, r6
 8000b7a:	e708      	b.n	800098e <__udivmoddi4+0xa2>
 8000b7c:	4639      	mov	r1, r7
 8000b7e:	e6e6      	b.n	800094e <__udivmoddi4+0x62>
 8000b80:	4610      	mov	r0, r2
 8000b82:	e6fb      	b.n	800097c <__udivmoddi4+0x90>
 8000b84:	4548      	cmp	r0, r9
 8000b86:	d2a9      	bcs.n	8000adc <__udivmoddi4+0x1f0>
 8000b88:	ebb9 0802 	subs.w	r8, r9, r2
 8000b8c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b90:	3b01      	subs	r3, #1
 8000b92:	e7a3      	b.n	8000adc <__udivmoddi4+0x1f0>
 8000b94:	4645      	mov	r5, r8
 8000b96:	e7ea      	b.n	8000b6e <__udivmoddi4+0x282>
 8000b98:	462b      	mov	r3, r5
 8000b9a:	e794      	b.n	8000ac6 <__udivmoddi4+0x1da>
 8000b9c:	4640      	mov	r0, r8
 8000b9e:	e7d1      	b.n	8000b44 <__udivmoddi4+0x258>
 8000ba0:	46d0      	mov	r8, sl
 8000ba2:	e77b      	b.n	8000a9c <__udivmoddi4+0x1b0>
 8000ba4:	3d02      	subs	r5, #2
 8000ba6:	4462      	add	r2, ip
 8000ba8:	e732      	b.n	8000a10 <__udivmoddi4+0x124>
 8000baa:	4608      	mov	r0, r1
 8000bac:	e70a      	b.n	80009c4 <__udivmoddi4+0xd8>
 8000bae:	4464      	add	r4, ip
 8000bb0:	3802      	subs	r0, #2
 8000bb2:	e742      	b.n	8000a3a <__udivmoddi4+0x14e>

08000bb4 <__aeabi_idiv0>:
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <_write>:
static void MX_USART2_UART_Init(void);
static void MX_CAN1_Init(void);
/* USER CODE BEGIN PFP */

int _write(int file, char *ptr, int len)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	230a      	movs	r3, #10
 8000bca:	68b9      	ldr	r1, [r7, #8]
 8000bcc:	4803      	ldr	r0, [pc, #12]	; (8000bdc <_write+0x24>)
 8000bce:	f002 fc86 	bl	80034de <HAL_UART_Transmit>
  return len;
 8000bd2:	687b      	ldr	r3, [r7, #4]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	200000ac 	.word	0x200000ac

08000be0 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// 受信割り込みコールバック関数
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000be2:	b089      	sub	sp, #36	; 0x24
 8000be4:	af06      	add	r7, sp, #24
 8000be6:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000be8:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000bea:	4a1a      	ldr	r2, [pc, #104]	; (8000c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000bec:	2100      	movs	r1, #0
 8000bee:	481a      	ldr	r0, [pc, #104]	; (8000c58 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000bf0:	f001 f818 	bl	8001c24 <HAL_CAN_GetRxMessage>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    Error_Handler();
 8000bfa:	f000 fa8f 	bl	800111c <Error_Handler>
  }
  printf(" id = %ld [0] = %x [1] = %x [2] = %x [3] = %x [4] = %x [5] = %x [6] = %x [7] = %x\r\n", RxHeader.StdId, RxData[0], RxData[1], RxData[2], RxData[3], RxData[4], RxData[5], RxData[6], RxData[7]);
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000c00:	6819      	ldr	r1, [r3, #0]
 8000c02:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	469c      	mov	ip, r3
 8000c08:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000c0a:	785b      	ldrb	r3, [r3, #1]
 8000c0c:	469e      	mov	lr, r3
 8000c0e:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000c10:	789b      	ldrb	r3, [r3, #2]
 8000c12:	461a      	mov	r2, r3
 8000c14:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000c16:	78db      	ldrb	r3, [r3, #3]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000c1c:	791b      	ldrb	r3, [r3, #4]
 8000c1e:	461c      	mov	r4, r3
 8000c20:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000c22:	795b      	ldrb	r3, [r3, #5]
 8000c24:	461d      	mov	r5, r3
 8000c26:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000c28:	799b      	ldrb	r3, [r3, #6]
 8000c2a:	461e      	mov	r6, r3
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000c2e:	79db      	ldrb	r3, [r3, #7]
 8000c30:	9305      	str	r3, [sp, #20]
 8000c32:	9604      	str	r6, [sp, #16]
 8000c34:	9503      	str	r5, [sp, #12]
 8000c36:	9402      	str	r4, [sp, #8]
 8000c38:	9001      	str	r0, [sp, #4]
 8000c3a:	9200      	str	r2, [sp, #0]
 8000c3c:	4673      	mov	r3, lr
 8000c3e:	4662      	mov	r2, ip
 8000c40:	4806      	ldr	r0, [pc, #24]	; (8000c5c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000c42:	f003 f871 	bl	8003d28 <iprintf>
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	2000012c 	.word	0x2000012c
 8000c54:	20000108 	.word	0x20000108
 8000c58:	20000084 	.word	0x20000084
 8000c5c:	08004c58 	.word	0x08004c58

08000c60 <CanActivation>:

// CANのアクティベーション
void CanActivation(void) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 8000c64:	2102      	movs	r1, #2
 8000c66:	480f      	ldr	r0, [pc, #60]	; (8000ca4 <CanActivation+0x44>)
 8000c68:	f001 f8ee 	bl	8001e48 <HAL_CAN_ActivateNotification>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <CanActivation+0x16>
    Error_Handler();
 8000c72:	f000 fa53 	bl	800111c <Error_Handler>
  }
  printf("Activation OK \n");
 8000c76:	480c      	ldr	r0, [pc, #48]	; (8000ca8 <CanActivation+0x48>)
 8000c78:	f003 f8bc 	bl	8003df4 <puts>
  if (HAL_CAN_Start(&hcan1) != HAL_OK){
 8000c7c:	4809      	ldr	r0, [pc, #36]	; (8000ca4 <CanActivation+0x44>)
 8000c7e:	f000 fe7d 	bl	800197c <HAL_CAN_Start>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d007      	beq.n	8000c98 <CanActivation+0x38>
    printf("error code: %d", hcan1.ErrorCode);
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <CanActivation+0x44>)
 8000c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4807      	ldr	r0, [pc, #28]	; (8000cac <CanActivation+0x4c>)
 8000c90:	f003 f84a 	bl	8003d28 <iprintf>
	Error_Handler();
 8000c94:	f000 fa42 	bl	800111c <Error_Handler>
  }
  printf("CAN Start OK");
 8000c98:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <CanActivation+0x50>)
 8000c9a:	f003 f845 	bl	8003d28 <iprintf>
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000084 	.word	0x20000084
 8000ca8:	08004cac 	.word	0x08004cac
 8000cac:	08004cbc 	.word	0x08004cbc
 8000cb0:	08004ccc 	.word	0x08004ccc
 8000cb4:	00000000 	.word	0x00000000

08000cb8 <CanVescDrive>:

// VESCを使ってCANでBLDCを回す
void CanVescDrive(enum VescMode mode, unsigned int address, float value) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	ed87 0a01 	vstr	s0, [r7, #4]
 8000cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t set_value = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
  if (mode == kDuty){
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d113      	bne.n	8000cfa <CanVescDrive+0x42>
	set_value = 100000.0 * value;
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff fd7a 	bl	80007cc <__aeabi_f2d>
 8000cd8:	a347      	add	r3, pc, #284	; (adr r3, 8000df8 <CanVescDrive+0x140>)
 8000cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cde:	f7ff fae7 	bl	80002b0 <__aeabi_dmul>
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	4610      	mov	r0, r2
 8000ce8:	4619      	mov	r1, r3
 8000cea:	f7ff fdc7 	bl	800087c <__aeabi_d2uiz>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	617b      	str	r3, [r7, #20]
    TxHeader.ExtId = 0x000 | address;
 8000cf2:	4a3b      	ldr	r2, [pc, #236]	; (8000de0 <CanVescDrive+0x128>)
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	6053      	str	r3, [r2, #4]
 8000cf8:	e027      	b.n	8000d4a <CanVescDrive+0x92>
  }
  else if (mode == kCurrent) {
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d115      	bne.n	8000d2c <CanVescDrive+0x74>
    set_value = 1000.0 * value;
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff fd63 	bl	80007cc <__aeabi_f2d>
 8000d06:	f04f 0200 	mov.w	r2, #0
 8000d0a:	4b36      	ldr	r3, [pc, #216]	; (8000de4 <CanVescDrive+0x12c>)
 8000d0c:	f7ff fad0 	bl	80002b0 <__aeabi_dmul>
 8000d10:	4602      	mov	r2, r0
 8000d12:	460b      	mov	r3, r1
 8000d14:	4610      	mov	r0, r2
 8000d16:	4619      	mov	r1, r3
 8000d18:	f7ff fdb0 	bl	800087c <__aeabi_d2uiz>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	617b      	str	r3, [r7, #20]
    TxHeader.ExtId = 0x100 | address;
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d26:	4a2e      	ldr	r2, [pc, #184]	; (8000de0 <CanVescDrive+0x128>)
 8000d28:	6053      	str	r3, [r2, #4]
 8000d2a:	e00e      	b.n	8000d4a <CanVescDrive+0x92>
  }
  else if (mode == kRpm) {
 8000d2c:	7bfb      	ldrb	r3, [r7, #15]
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d10b      	bne.n	8000d4a <CanVescDrive+0x92>
    set_value = value;
 8000d32:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d3a:	ee17 3a90 	vmov	r3, s15
 8000d3e:	617b      	str	r3, [r7, #20]
    TxHeader.ExtId = 0x300 | address;
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000d46:	4a26      	ldr	r2, [pc, #152]	; (8000de0 <CanVescDrive+0x128>)
 8000d48:	6053      	str	r3, [r2, #4]
  }
  TxHeader.RTR = CAN_RTR_DATA;
 8000d4a:	4b25      	ldr	r3, [pc, #148]	; (8000de0 <CanVescDrive+0x128>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_EXT;
 8000d50:	4b23      	ldr	r3, [pc, #140]	; (8000de0 <CanVescDrive+0x128>)
 8000d52:	2204      	movs	r2, #4
 8000d54:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 4;
 8000d56:	4b22      	ldr	r3, [pc, #136]	; (8000de0 <CanVescDrive+0x128>)
 8000d58:	2204      	movs	r2, #4
 8000d5a:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000d5c:	4b20      	ldr	r3, [pc, #128]	; (8000de0 <CanVescDrive+0x128>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	751a      	strb	r2, [r3, #20]

  TxData[0] = (set_value >> 24) & 0xFF;
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	0e1b      	lsrs	r3, r3, #24
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <CanVescDrive+0x130>)
 8000d6a:	701a      	strb	r2, [r3, #0]
  TxData[1] = (set_value >> 16) & 0xFF;
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	0c1b      	lsrs	r3, r3, #16
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4b1d      	ldr	r3, [pc, #116]	; (8000de8 <CanVescDrive+0x130>)
 8000d74:	705a      	strb	r2, [r3, #1]
  TxData[2] = (set_value >> 8)  & 0xFF;
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	0a1b      	lsrs	r3, r3, #8
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <CanVescDrive+0x130>)
 8000d7e:	709a      	strb	r2, [r3, #2]
  TxData[3] = set_value & 0xFF;
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <CanVescDrive+0x130>)
 8000d86:	70da      	strb	r2, [r3, #3]
  //Request transmission
  while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) < 1) continue;
 8000d88:	e000      	b.n	8000d8c <CanVescDrive+0xd4>
 8000d8a:	bf00      	nop
 8000d8c:	4817      	ldr	r0, [pc, #92]	; (8000dec <CanVescDrive+0x134>)
 8000d8e:	f000 ff14 	bl	8001bba <HAL_CAN_GetTxMailboxesFreeLevel>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d0f8      	beq.n	8000d8a <CanVescDrive+0xd2>
  if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000d98:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <CanVescDrive+0x138>)
 8000d9a:	4a13      	ldr	r2, [pc, #76]	; (8000de8 <CanVescDrive+0x130>)
 8000d9c:	4910      	ldr	r1, [pc, #64]	; (8000de0 <CanVescDrive+0x128>)
 8000d9e:	4813      	ldr	r0, [pc, #76]	; (8000dec <CanVescDrive+0x134>)
 8000da0:	f000 fe30 	bl	8001a04 <HAL_CAN_AddTxMessage>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d007      	beq.n	8000dba <CanVescDrive+0x102>
  {
    printf("error code: %x", hcan1.ErrorCode);
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <CanVescDrive+0x134>)
 8000dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dae:	4619      	mov	r1, r3
 8000db0:	4810      	ldr	r0, [pc, #64]	; (8000df4 <CanVescDrive+0x13c>)
 8000db2:	f002 ffb9 	bl	8003d28 <iprintf>
    Error_Handler();
 8000db6:	f000 f9b1 	bl	800111c <Error_Handler>
  }
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000dba:	2102      	movs	r1, #2
 8000dbc:	480b      	ldr	r0, [pc, #44]	; (8000dec <CanVescDrive+0x134>)
 8000dbe:	f001 f843 	bl	8001e48 <HAL_CAN_ActivateNotification>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d007      	beq.n	8000dd8 <CanVescDrive+0x120>
  {
    printf("error code: %x", hcan1.ErrorCode);
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <CanVescDrive+0x134>)
 8000dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4809      	ldr	r0, [pc, #36]	; (8000df4 <CanVescDrive+0x13c>)
 8000dd0:	f002 ffaa 	bl	8003d28 <iprintf>
    Error_Handler();
 8000dd4:	f000 f9a2 	bl	800111c <Error_Handler>
  }
}
 8000dd8:	bf00      	nop
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	200000f0 	.word	0x200000f0
 8000de4:	408f4000 	.word	0x408f4000
 8000de8:	20000124 	.word	0x20000124
 8000dec:	20000084 	.word	0x20000084
 8000df0:	20000134 	.word	0x20000134
 8000df4:	08004cdc 	.word	0x08004cdc
 8000df8:	00000000 	.word	0x00000000
 8000dfc:	40f86a00 	.word	0x40f86a00

08000e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e04:	f000 fb6c 	bl	80014e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e08:	f000 f826 	bl	8000e58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e0c:	f000 f918 	bl	8001040 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e10:	f000 f8ec 	bl	8000fec <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8000e14:	f000 f88e 	bl	8000f34 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  setbuf(stdout, NULL);
 8000e18:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <main+0x48>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f002 ffef 	bl	8003e04 <setbuf>
  printf("Hello World\n");
 8000e26:	4809      	ldr	r0, [pc, #36]	; (8000e4c <main+0x4c>)
 8000e28:	f002 ffe4 	bl	8003df4 <puts>
  CanActivation();
 8000e2c:	f7ff ff18 	bl	8000c60 <CanActivation>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000e30:	2201      	movs	r2, #1
 8000e32:	2120      	movs	r1, #32
 8000e34:	4806      	ldr	r0, [pc, #24]	; (8000e50 <main+0x50>)
 8000e36:	f001 fd03 	bl	8002840 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  CanVescDrive(kRpm, 0x5C, 0);
 8000e3a:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8000e54 <main+0x54>
 8000e3e:	215c      	movs	r1, #92	; 0x5c
 8000e40:	2002      	movs	r0, #2
 8000e42:	f7ff ff39 	bl	8000cb8 <CanVescDrive>
 8000e46:	e7f8      	b.n	8000e3a <main+0x3a>
 8000e48:	20000064 	.word	0x20000064
 8000e4c:	08004cec 	.word	0x08004cec
 8000e50:	40020000 	.word	0x40020000
 8000e54:	00000000 	.word	0x00000000

08000e58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b094      	sub	sp, #80	; 0x50
 8000e5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e5e:	f107 031c 	add.w	r3, r7, #28
 8000e62:	2234      	movs	r2, #52	; 0x34
 8000e64:	2100      	movs	r1, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f003 f95a 	bl	8004120 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e6c:	f107 0308 	add.w	r3, r7, #8
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	4b2a      	ldr	r3, [pc, #168]	; (8000f2c <SystemClock_Config+0xd4>)
 8000e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e84:	4a29      	ldr	r2, [pc, #164]	; (8000f2c <SystemClock_Config+0xd4>)
 8000e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8c:	4b27      	ldr	r3, [pc, #156]	; (8000f2c <SystemClock_Config+0xd4>)
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e94:	607b      	str	r3, [r7, #4]
 8000e96:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e98:	2300      	movs	r3, #0
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	4b24      	ldr	r3, [pc, #144]	; (8000f30 <SystemClock_Config+0xd8>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ea4:	4a22      	ldr	r2, [pc, #136]	; (8000f30 <SystemClock_Config+0xd8>)
 8000ea6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eaa:	6013      	str	r3, [r2, #0]
 8000eac:	4b20      	ldr	r3, [pc, #128]	; (8000f30 <SystemClock_Config+0xd8>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000eb4:	603b      	str	r3, [r7, #0]
 8000eb6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ec0:	2310      	movs	r3, #16
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ecc:	2310      	movs	r3, #16
 8000ece:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ed0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ed4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000eda:	2302      	movs	r3, #2
 8000edc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee2:	f107 031c 	add.w	r3, r7, #28
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f002 f80e 	bl	8002f08 <HAL_RCC_OscConfig>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ef2:	f000 f913 	bl	800111c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef6:	230f      	movs	r3, #15
 8000ef8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000efa:	2302      	movs	r3, #2
 8000efc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f0c:	f107 0308 	add.w	r3, r7, #8
 8000f10:	2102      	movs	r1, #2
 8000f12:	4618      	mov	r0, r3
 8000f14:	f001 fcae 	bl	8002874 <HAL_RCC_ClockConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000f1e:	f000 f8fd 	bl	800111c <Error_Handler>
  }
}
 8000f22:	bf00      	nop
 8000f24:	3750      	adds	r7, #80	; 0x50
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40007000 	.word	0x40007000

08000f34 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	; 0x28
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000f3a:	4b29      	ldr	r3, [pc, #164]	; (8000fe0 <MX_CAN1_Init+0xac>)
 8000f3c:	4a29      	ldr	r2, [pc, #164]	; (8000fe4 <MX_CAN1_Init+0xb0>)
 8000f3e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8000f40:	4b27      	ldr	r3, [pc, #156]	; (8000fe0 <MX_CAN1_Init+0xac>)
 8000f42:	2204      	movs	r2, #4
 8000f44:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f46:	4b26      	ldr	r3, [pc, #152]	; (8000fe0 <MX_CAN1_Init+0xac>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f4c:	4b24      	ldr	r3, [pc, #144]	; (8000fe0 <MX_CAN1_Init+0xac>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_16TQ;
 8000f52:	4b23      	ldr	r3, [pc, #140]	; (8000fe0 <MX_CAN1_Init+0xac>)
 8000f54:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8000f58:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000f5a:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <MX_CAN1_Init+0xac>)
 8000f5c:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000f60:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f62:	4b1f      	ldr	r3, [pc, #124]	; (8000fe0 <MX_CAN1_Init+0xac>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000f68:	4b1d      	ldr	r3, [pc, #116]	; (8000fe0 <MX_CAN1_Init+0xac>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000f6e:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <MX_CAN1_Init+0xac>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000f74:	4b1a      	ldr	r3, [pc, #104]	; (8000fe0 <MX_CAN1_Init+0xac>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f7a:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <MX_CAN1_Init+0xac>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f80:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <MX_CAN1_Init+0xac>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f86:	4816      	ldr	r0, [pc, #88]	; (8000fe0 <MX_CAN1_Init+0xac>)
 8000f88:	f000 fb1c 	bl	80015c4 <HAL_CAN_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000f92:	f000 f8c3 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef  sFilterConfig;
  sFilterConfig.FilterBank = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8000fba:	230e      	movs	r3, #14
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4807      	ldr	r0, [pc, #28]	; (8000fe0 <MX_CAN1_Init+0xac>)
 8000fc4:	f000 fbfa 	bl	80017bc <HAL_CAN_ConfigFilter>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_CAN1_Init+0x9e>
  {
    Error_Handler();
 8000fce:	f000 f8a5 	bl	800111c <Error_Handler>
  }
  printf("Filter OK \n");
 8000fd2:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <MX_CAN1_Init+0xb4>)
 8000fd4:	f002 ff0e 	bl	8003df4 <puts>
  /* USER CODE END CAN1_Init 2 */

}
 8000fd8:	bf00      	nop
 8000fda:	3728      	adds	r7, #40	; 0x28
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000084 	.word	0x20000084
 8000fe4:	40006400 	.word	0x40006400
 8000fe8:	08004cf8 	.word	0x08004cf8

08000fec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <MX_USART2_UART_Init+0x4c>)
 8000ff2:	4a12      	ldr	r2, [pc, #72]	; (800103c <MX_USART2_UART_Init+0x50>)
 8000ff4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <MX_USART2_UART_Init+0x4c>)
 8000ff8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ffc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <MX_USART2_UART_Init+0x4c>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MX_USART2_UART_Init+0x4c>)
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <MX_USART2_UART_Init+0x4c>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_USART2_UART_Init+0x4c>)
 8001012:	220c      	movs	r2, #12
 8001014:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <MX_USART2_UART_Init+0x4c>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_USART2_UART_Init+0x4c>)
 800101e:	2200      	movs	r2, #0
 8001020:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <MX_USART2_UART_Init+0x4c>)
 8001024:	f002 fa0e 	bl	8003444 <HAL_UART_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800102e:	f000 f875 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200000ac 	.word	0x200000ac
 800103c:	40004400 	.word	0x40004400

08001040 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
 800105a:	4b2d      	ldr	r3, [pc, #180]	; (8001110 <MX_GPIO_Init+0xd0>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a2c      	ldr	r2, [pc, #176]	; (8001110 <MX_GPIO_Init+0xd0>)
 8001060:	f043 0304 	orr.w	r3, r3, #4
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b2a      	ldr	r3, [pc, #168]	; (8001110 <MX_GPIO_Init+0xd0>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	4b26      	ldr	r3, [pc, #152]	; (8001110 <MX_GPIO_Init+0xd0>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a25      	ldr	r2, [pc, #148]	; (8001110 <MX_GPIO_Init+0xd0>)
 800107c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b23      	ldr	r3, [pc, #140]	; (8001110 <MX_GPIO_Init+0xd0>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <MX_GPIO_Init+0xd0>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a1e      	ldr	r2, [pc, #120]	; (8001110 <MX_GPIO_Init+0xd0>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <MX_GPIO_Init+0xd0>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	4b18      	ldr	r3, [pc, #96]	; (8001110 <MX_GPIO_Init+0xd0>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a17      	ldr	r2, [pc, #92]	; (8001110 <MX_GPIO_Init+0xd0>)
 80010b4:	f043 0302 	orr.w	r3, r3, #2
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <MX_GPIO_Init+0xd0>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2120      	movs	r1, #32
 80010ca:	4812      	ldr	r0, [pc, #72]	; (8001114 <MX_GPIO_Init+0xd4>)
 80010cc:	f001 fbb8 	bl	8002840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010d6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	4619      	mov	r1, r3
 80010e6:	480c      	ldr	r0, [pc, #48]	; (8001118 <MX_GPIO_Init+0xd8>)
 80010e8:	f001 fa16 	bl	8002518 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010ec:	2320      	movs	r3, #32
 80010ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	4804      	ldr	r0, [pc, #16]	; (8001114 <MX_GPIO_Init+0xd4>)
 8001104:	f001 fa08 	bl	8002518 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001108:	bf00      	nop
 800110a:	3728      	adds	r7, #40	; 0x28
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40023800 	.word	0x40023800
 8001114:	40020000 	.word	0x40020000
 8001118:	40020800 	.word	0x40020800

0800111c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001120:	b672      	cpsid	i
}
 8001122:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001124:	e7fe      	b.n	8001124 <Error_Handler+0x8>
	...

08001128 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <HAL_MspInit+0x4c>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	4a0f      	ldr	r2, [pc, #60]	; (8001174 <HAL_MspInit+0x4c>)
 8001138:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800113c:	6453      	str	r3, [r2, #68]	; 0x44
 800113e:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <HAL_MspInit+0x4c>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	603b      	str	r3, [r7, #0]
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <HAL_MspInit+0x4c>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	4a08      	ldr	r2, [pc, #32]	; (8001174 <HAL_MspInit+0x4c>)
 8001154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001158:	6413      	str	r3, [r2, #64]	; 0x40
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_MspInit+0x4c>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001166:	2007      	movs	r0, #7
 8001168:	f001 f994 	bl	8002494 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40023800 	.word	0x40023800

08001178 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08a      	sub	sp, #40	; 0x28
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a25      	ldr	r2, [pc, #148]	; (800122c <HAL_CAN_MspInit+0xb4>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d144      	bne.n	8001224 <HAL_CAN_MspInit+0xac>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	4b24      	ldr	r3, [pc, #144]	; (8001230 <HAL_CAN_MspInit+0xb8>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	4a23      	ldr	r2, [pc, #140]	; (8001230 <HAL_CAN_MspInit+0xb8>)
 80011a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011a8:	6413      	str	r3, [r2, #64]	; 0x40
 80011aa:	4b21      	ldr	r3, [pc, #132]	; (8001230 <HAL_CAN_MspInit+0xb8>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <HAL_CAN_MspInit+0xb8>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a1c      	ldr	r2, [pc, #112]	; (8001230 <HAL_CAN_MspInit+0xb8>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <HAL_CAN_MspInit+0xb8>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80011d2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e0:	2303      	movs	r3, #3
 80011e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80011e4:	2309      	movs	r3, #9
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	4619      	mov	r1, r3
 80011ee:	4811      	ldr	r0, [pc, #68]	; (8001234 <HAL_CAN_MspInit+0xbc>)
 80011f0:	f001 f992 	bl	8002518 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2100      	movs	r1, #0
 80011f8:	2013      	movs	r0, #19
 80011fa:	f001 f956 	bl	80024aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80011fe:	2013      	movs	r0, #19
 8001200:	f001 f96f 	bl	80024e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001204:	2200      	movs	r2, #0
 8001206:	2100      	movs	r1, #0
 8001208:	2014      	movs	r0, #20
 800120a:	f001 f94e 	bl	80024aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800120e:	2014      	movs	r0, #20
 8001210:	f001 f967 	bl	80024e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001214:	2200      	movs	r2, #0
 8001216:	2100      	movs	r1, #0
 8001218:	2015      	movs	r0, #21
 800121a:	f001 f946 	bl	80024aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800121e:	2015      	movs	r0, #21
 8001220:	f001 f95f 	bl	80024e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001224:	bf00      	nop
 8001226:	3728      	adds	r7, #40	; 0x28
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40006400 	.word	0x40006400
 8001230:	40023800 	.word	0x40023800
 8001234:	40020000 	.word	0x40020000

08001238 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a19      	ldr	r2, [pc, #100]	; (80012bc <HAL_UART_MspInit+0x84>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d12b      	bne.n	80012b2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <HAL_UART_MspInit+0x88>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	4a17      	ldr	r2, [pc, #92]	; (80012c0 <HAL_UART_MspInit+0x88>)
 8001264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001268:	6413      	str	r3, [r2, #64]	; 0x40
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <HAL_UART_MspInit+0x88>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <HAL_UART_MspInit+0x88>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a10      	ldr	r2, [pc, #64]	; (80012c0 <HAL_UART_MspInit+0x88>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <HAL_UART_MspInit+0x88>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001292:	230c      	movs	r3, #12
 8001294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129e:	2303      	movs	r3, #3
 80012a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012a2:	2307      	movs	r3, #7
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4619      	mov	r1, r3
 80012ac:	4805      	ldr	r0, [pc, #20]	; (80012c4 <HAL_UART_MspInit+0x8c>)
 80012ae:	f001 f933 	bl	8002518 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012b2:	bf00      	nop
 80012b4:	3728      	adds	r7, #40	; 0x28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40004400 	.word	0x40004400
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40020000 	.word	0x40020000

080012c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <NMI_Handler+0x4>

080012ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <HardFault_Handler+0x4>

080012d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <MemManage_Handler+0x4>

080012da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012de:	e7fe      	b.n	80012de <BusFault_Handler+0x4>

080012e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <UsageFault_Handler+0x4>

080012e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001314:	f000 f936 	bl	8001584 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}

0800131c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001320:	4802      	ldr	r0, [pc, #8]	; (800132c <CAN1_TX_IRQHandler+0x10>)
 8001322:	f000 fdb7 	bl	8001e94 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000084 	.word	0x20000084

08001330 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <CAN1_RX0_IRQHandler+0x10>)
 8001336:	f000 fdad 	bl	8001e94 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000084 	.word	0x20000084

08001344 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001348:	4802      	ldr	r0, [pc, #8]	; (8001354 <CAN1_RX1_IRQHandler+0x10>)
 800134a:	f000 fda3 	bl	8001e94 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000084 	.word	0x20000084

08001358 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	e00a      	b.n	8001380 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800136a:	f3af 8000 	nop.w
 800136e:	4601      	mov	r1, r0
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	1c5a      	adds	r2, r3, #1
 8001374:	60ba      	str	r2, [r7, #8]
 8001376:	b2ca      	uxtb	r2, r1
 8001378:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	3301      	adds	r3, #1
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	429a      	cmp	r2, r3
 8001386:	dbf0      	blt.n	800136a <_read+0x12>
  }

  return len;
 8001388:	687b      	ldr	r3, [r7, #4]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800139a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
 80013b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ba:	605a      	str	r2, [r3, #4]
  return 0;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <_isatty>:

int _isatty(int file)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013d2:	2301      	movs	r3, #1
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001404:	4a14      	ldr	r2, [pc, #80]	; (8001458 <_sbrk+0x5c>)
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <_sbrk+0x60>)
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001410:	4b13      	ldr	r3, [pc, #76]	; (8001460 <_sbrk+0x64>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d102      	bne.n	800141e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <_sbrk+0x64>)
 800141a:	4a12      	ldr	r2, [pc, #72]	; (8001464 <_sbrk+0x68>)
 800141c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <_sbrk+0x64>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	429a      	cmp	r2, r3
 800142a:	d207      	bcs.n	800143c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800142c:	f002 fec6 	bl	80041bc <__errno>
 8001430:	4603      	mov	r3, r0
 8001432:	220c      	movs	r2, #12
 8001434:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800143a:	e009      	b.n	8001450 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <_sbrk+0x64>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001442:	4b07      	ldr	r3, [pc, #28]	; (8001460 <_sbrk+0x64>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4413      	add	r3, r2
 800144a:	4a05      	ldr	r2, [pc, #20]	; (8001460 <_sbrk+0x64>)
 800144c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800144e:	68fb      	ldr	r3, [r7, #12]
}
 8001450:	4618      	mov	r0, r3
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20020000 	.word	0x20020000
 800145c:	00000400 	.word	0x00000400
 8001460:	20000138 	.word	0x20000138
 8001464:	20000290 	.word	0x20000290

08001468 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <SystemInit+0x20>)
 800146e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001472:	4a05      	ldr	r2, [pc, #20]	; (8001488 <SystemInit+0x20>)
 8001474:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001478:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800148c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001490:	480d      	ldr	r0, [pc, #52]	; (80014c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001492:	490e      	ldr	r1, [pc, #56]	; (80014cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001494:	4a0e      	ldr	r2, [pc, #56]	; (80014d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001498:	e002      	b.n	80014a0 <LoopCopyDataInit>

0800149a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800149a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800149c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149e:	3304      	adds	r3, #4

080014a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a4:	d3f9      	bcc.n	800149a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a6:	4a0b      	ldr	r2, [pc, #44]	; (80014d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014a8:	4c0b      	ldr	r4, [pc, #44]	; (80014d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ac:	e001      	b.n	80014b2 <LoopFillZerobss>

080014ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b0:	3204      	adds	r2, #4

080014b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b4:	d3fb      	bcc.n	80014ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014b6:	f7ff ffd7 	bl	8001468 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ba:	f002 fe85 	bl	80041c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014be:	f7ff fc9f 	bl	8000e00 <main>
  bx  lr    
 80014c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014cc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80014d0:	08004d60 	.word	0x08004d60
  ldr r2, =_sbss
 80014d4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80014d8:	2000028c 	.word	0x2000028c

080014dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014dc:	e7fe      	b.n	80014dc <ADC_IRQHandler>
	...

080014e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014e4:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <HAL_Init+0x40>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a0d      	ldr	r2, [pc, #52]	; (8001520 <HAL_Init+0x40>)
 80014ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <HAL_Init+0x40>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <HAL_Init+0x40>)
 80014f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <HAL_Init+0x40>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a07      	ldr	r2, [pc, #28]	; (8001520 <HAL_Init+0x40>)
 8001502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001506:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001508:	2003      	movs	r0, #3
 800150a:	f000 ffc3 	bl	8002494 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800150e:	2000      	movs	r0, #0
 8001510:	f000 f808 	bl	8001524 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001514:	f7ff fe08 	bl	8001128 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40023c00 	.word	0x40023c00

08001524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_InitTick+0x54>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_InitTick+0x58>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	4619      	mov	r1, r3
 8001536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153a:	fbb3 f3f1 	udiv	r3, r3, r1
 800153e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001542:	4618      	mov	r0, r3
 8001544:	f000 ffdb 	bl	80024fe <HAL_SYSTICK_Config>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e00e      	b.n	8001570 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b0f      	cmp	r3, #15
 8001556:	d80a      	bhi.n	800156e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001558:	2200      	movs	r2, #0
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001560:	f000 ffa3 	bl	80024aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001564:	4a06      	ldr	r2, [pc, #24]	; (8001580 <HAL_InitTick+0x5c>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	e000      	b.n	8001570 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
}
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000000 	.word	0x20000000
 800157c:	20000008 	.word	0x20000008
 8001580:	20000004 	.word	0x20000004

08001584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_IncTick+0x20>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_IncTick+0x24>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4413      	add	r3, r2
 8001594:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <HAL_IncTick+0x24>)
 8001596:	6013      	str	r3, [r2, #0]
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	20000008 	.word	0x20000008
 80015a8:	2000013c 	.word	0x2000013c

080015ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return uwTick;
 80015b0:	4b03      	ldr	r3, [pc, #12]	; (80015c0 <HAL_GetTick+0x14>)
 80015b2:	681b      	ldr	r3, [r3, #0]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	2000013c 	.word	0x2000013c

080015c4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e0ed      	b.n	80017b2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d102      	bne.n	80015e8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff fdc8 	bl	8001178 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f042 0201 	orr.w	r2, r2, #1
 80015f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015f8:	f7ff ffd8 	bl	80015ac <HAL_GetTick>
 80015fc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015fe:	e012      	b.n	8001626 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001600:	f7ff ffd4 	bl	80015ac <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b0a      	cmp	r3, #10
 800160c:	d90b      	bls.n	8001626 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001612:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2205      	movs	r2, #5
 800161e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e0c5      	b.n	80017b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0e5      	beq.n	8001600 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 0202 	bic.w	r2, r2, #2
 8001642:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001644:	f7ff ffb2 	bl	80015ac <HAL_GetTick>
 8001648:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800164a:	e012      	b.n	8001672 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800164c:	f7ff ffae 	bl	80015ac <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b0a      	cmp	r3, #10
 8001658:	d90b      	bls.n	8001672 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2205      	movs	r2, #5
 800166a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e09f      	b.n	80017b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1e5      	bne.n	800164c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	7e1b      	ldrb	r3, [r3, #24]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d108      	bne.n	800169a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	e007      	b.n	80016aa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	7e5b      	ldrb	r3, [r3, #25]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d108      	bne.n	80016c4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	e007      	b.n	80016d4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	7e9b      	ldrb	r3, [r3, #26]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d108      	bne.n	80016ee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 0220 	orr.w	r2, r2, #32
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	e007      	b.n	80016fe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 0220 	bic.w	r2, r2, #32
 80016fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	7edb      	ldrb	r3, [r3, #27]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d108      	bne.n	8001718 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 0210 	bic.w	r2, r2, #16
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	e007      	b.n	8001728 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f042 0210 	orr.w	r2, r2, #16
 8001726:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	7f1b      	ldrb	r3, [r3, #28]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d108      	bne.n	8001742 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f042 0208 	orr.w	r2, r2, #8
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	e007      	b.n	8001752 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 0208 	bic.w	r2, r2, #8
 8001750:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	7f5b      	ldrb	r3, [r3, #29]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d108      	bne.n	800176c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f042 0204 	orr.w	r2, r2, #4
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	e007      	b.n	800177c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 0204 	bic.w	r2, r2, #4
 800177a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	431a      	orrs	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	ea42 0103 	orr.w	r1, r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	1e5a      	subs	r2, r3, #1
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	430a      	orrs	r2, r1
 80017a0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80017bc:	b480      	push	{r7}
 80017be:	b087      	sub	sp, #28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017d2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80017d4:	7cfb      	ldrb	r3, [r7, #19]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d003      	beq.n	80017e2 <HAL_CAN_ConfigFilter+0x26>
 80017da:	7cfb      	ldrb	r3, [r7, #19]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	f040 80be 	bne.w	800195e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80017e2:	4b65      	ldr	r3, [pc, #404]	; (8001978 <HAL_CAN_ConfigFilter+0x1bc>)
 80017e4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017ec:	f043 0201 	orr.w	r2, r3, #1
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017fc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001810:	021b      	lsls	r3, r3, #8
 8001812:	431a      	orrs	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	f003 031f 	and.w	r3, r3, #31
 8001822:	2201      	movs	r2, #1
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	43db      	mvns	r3, r3
 8001834:	401a      	ands	r2, r3
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	69db      	ldr	r3, [r3, #28]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d123      	bne.n	800188c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	43db      	mvns	r3, r3
 800184e:	401a      	ands	r2, r3
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001866:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	3248      	adds	r2, #72	; 0x48
 800186c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001880:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001882:	6979      	ldr	r1, [r7, #20]
 8001884:	3348      	adds	r3, #72	; 0x48
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	440b      	add	r3, r1
 800188a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	69db      	ldr	r3, [r3, #28]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d122      	bne.n	80018da <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	431a      	orrs	r2, r3
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018b4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	3248      	adds	r2, #72	; 0x48
 80018ba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018ce:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018d0:	6979      	ldr	r1, [r7, #20]
 80018d2:	3348      	adds	r3, #72	; 0x48
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	440b      	add	r3, r1
 80018d8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d109      	bne.n	80018f6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	401a      	ands	r2, r3
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80018f4:	e007      	b.n	8001906 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	431a      	orrs	r2, r3
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d109      	bne.n	8001922 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	43db      	mvns	r3, r3
 8001918:	401a      	ands	r2, r3
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001920:	e007      	b.n	8001932 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	431a      	orrs	r2, r3
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d107      	bne.n	800194a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	431a      	orrs	r2, r3
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001950:	f023 0201 	bic.w	r2, r3, #1
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	e006      	b.n	800196c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001962:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
  }
}
 800196c:	4618      	mov	r0, r3
 800196e:	371c      	adds	r7, #28
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	40006400 	.word	0x40006400

0800197c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 3020 	ldrb.w	r3, [r3, #32]
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b01      	cmp	r3, #1
 800198e:	d12e      	bne.n	80019ee <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2202      	movs	r2, #2
 8001994:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 0201 	bic.w	r2, r2, #1
 80019a6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80019a8:	f7ff fe00 	bl	80015ac <HAL_GetTick>
 80019ac:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019ae:	e012      	b.n	80019d6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019b0:	f7ff fdfc 	bl	80015ac <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b0a      	cmp	r3, #10
 80019bc:	d90b      	bls.n	80019d6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2205      	movs	r2, #5
 80019ce:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e012      	b.n	80019fc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1e5      	bne.n	80019b0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e006      	b.n	80019fc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
  }
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b089      	sub	sp, #36	; 0x24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
 8001a10:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a18:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a22:	7ffb      	ldrb	r3, [r7, #31]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d003      	beq.n	8001a30 <HAL_CAN_AddTxMessage+0x2c>
 8001a28:	7ffb      	ldrb	r3, [r7, #31]
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	f040 80b8 	bne.w	8001ba0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10a      	bne.n	8001a50 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d105      	bne.n	8001a50 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f000 80a0 	beq.w	8001b90 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	0e1b      	lsrs	r3, r3, #24
 8001a54:	f003 0303 	and.w	r3, r3, #3
 8001a58:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d907      	bls.n	8001a70 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a64:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e09e      	b.n	8001bae <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001a70:	2201      	movs	r2, #1
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	409a      	lsls	r2, r3
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10d      	bne.n	8001a9e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a8c:	68f9      	ldr	r1, [r7, #12]
 8001a8e:	6809      	ldr	r1, [r1, #0]
 8001a90:	431a      	orrs	r2, r3
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	3318      	adds	r3, #24
 8001a96:	011b      	lsls	r3, r3, #4
 8001a98:	440b      	add	r3, r1
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	e00f      	b.n	8001abe <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001aa8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001aae:	68f9      	ldr	r1, [r7, #12]
 8001ab0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001ab2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	3318      	adds	r3, #24
 8001ab8:	011b      	lsls	r3, r3, #4
 8001aba:	440b      	add	r3, r1
 8001abc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6819      	ldr	r1, [r3, #0]
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	691a      	ldr	r2, [r3, #16]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	3318      	adds	r3, #24
 8001aca:	011b      	lsls	r3, r3, #4
 8001acc:	440b      	add	r3, r1
 8001ace:	3304      	adds	r3, #4
 8001ad0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	7d1b      	ldrb	r3, [r3, #20]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d111      	bne.n	8001afe <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	3318      	adds	r3, #24
 8001ae2:	011b      	lsls	r3, r3, #4
 8001ae4:	4413      	add	r3, r2
 8001ae6:	3304      	adds	r3, #4
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	6811      	ldr	r1, [r2, #0]
 8001aee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	3318      	adds	r3, #24
 8001af6:	011b      	lsls	r3, r3, #4
 8001af8:	440b      	add	r3, r1
 8001afa:	3304      	adds	r3, #4
 8001afc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	3307      	adds	r3, #7
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	061a      	lsls	r2, r3, #24
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3306      	adds	r3, #6
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	041b      	lsls	r3, r3, #16
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3305      	adds	r3, #5
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	021b      	lsls	r3, r3, #8
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	3204      	adds	r2, #4
 8001b1e:	7812      	ldrb	r2, [r2, #0]
 8001b20:	4610      	mov	r0, r2
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	6811      	ldr	r1, [r2, #0]
 8001b26:	ea43 0200 	orr.w	r2, r3, r0
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	011b      	lsls	r3, r3, #4
 8001b2e:	440b      	add	r3, r1
 8001b30:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001b34:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3303      	adds	r3, #3
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	061a      	lsls	r2, r3, #24
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3302      	adds	r3, #2
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	041b      	lsls	r3, r3, #16
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	021b      	lsls	r3, r3, #8
 8001b50:	4313      	orrs	r3, r2
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	7812      	ldrb	r2, [r2, #0]
 8001b56:	4610      	mov	r0, r2
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	6811      	ldr	r1, [r2, #0]
 8001b5c:	ea43 0200 	orr.w	r2, r3, r0
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	011b      	lsls	r3, r3, #4
 8001b64:	440b      	add	r3, r1
 8001b66:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001b6a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	3318      	adds	r3, #24
 8001b74:	011b      	lsls	r3, r3, #4
 8001b76:	4413      	add	r3, r2
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	6811      	ldr	r1, [r2, #0]
 8001b7e:	f043 0201 	orr.w	r2, r3, #1
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	3318      	adds	r3, #24
 8001b86:	011b      	lsls	r3, r3, #4
 8001b88:	440b      	add	r3, r1
 8001b8a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	e00e      	b.n	8001bae <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e006      	b.n	8001bae <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
  }
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3724      	adds	r7, #36	; 0x24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b085      	sub	sp, #20
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bcc:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001bce:	7afb      	ldrb	r3, [r7, #11]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d002      	beq.n	8001bda <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001bd4:	7afb      	ldrb	r3, [r7, #11]
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d11d      	bne.n	8001c16 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d002      	beq.n	8001bee <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	3301      	adds	r3, #1
 8001bec:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d002      	beq.n	8001c02 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d002      	beq.n	8001c16 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	3301      	adds	r3, #1
 8001c14:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001c16:	68fb      	ldr	r3, [r7, #12]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001c24:	b480      	push	{r7}
 8001c26:	b087      	sub	sp, #28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
 8001c30:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c38:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c3a:	7dfb      	ldrb	r3, [r7, #23]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d003      	beq.n	8001c48 <HAL_CAN_GetRxMessage+0x24>
 8001c40:	7dfb      	ldrb	r3, [r7, #23]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	f040 80f3 	bne.w	8001e2e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10e      	bne.n	8001c6c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d116      	bne.n	8001c8a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c60:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e0e7      	b.n	8001e3c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d107      	bne.n	8001c8a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e0d8      	b.n	8001e3c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	331b      	adds	r3, #27
 8001c92:	011b      	lsls	r3, r3, #4
 8001c94:	4413      	add	r3, r2
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0204 	and.w	r2, r3, #4
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10c      	bne.n	8001cc2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	331b      	adds	r3, #27
 8001cb0:	011b      	lsls	r3, r3, #4
 8001cb2:	4413      	add	r3, r2
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	0d5b      	lsrs	r3, r3, #21
 8001cb8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	e00b      	b.n	8001cda <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	331b      	adds	r3, #27
 8001cca:	011b      	lsls	r3, r3, #4
 8001ccc:	4413      	add	r3, r2
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	08db      	lsrs	r3, r3, #3
 8001cd2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	331b      	adds	r3, #27
 8001ce2:	011b      	lsls	r3, r3, #4
 8001ce4:	4413      	add	r3, r2
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0202 	and.w	r2, r3, #2
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	331b      	adds	r3, #27
 8001cf8:	011b      	lsls	r3, r3, #4
 8001cfa:	4413      	add	r3, r2
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 020f 	and.w	r2, r3, #15
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	331b      	adds	r3, #27
 8001d10:	011b      	lsls	r3, r3, #4
 8001d12:	4413      	add	r3, r2
 8001d14:	3304      	adds	r3, #4
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	0a1b      	lsrs	r3, r3, #8
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	331b      	adds	r3, #27
 8001d28:	011b      	lsls	r3, r3, #4
 8001d2a:	4413      	add	r3, r2
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	0c1b      	lsrs	r3, r3, #16
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	011b      	lsls	r3, r3, #4
 8001d40:	4413      	add	r3, r2
 8001d42:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	011b      	lsls	r3, r3, #4
 8001d56:	4413      	add	r3, r2
 8001d58:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	0a1a      	lsrs	r2, r3, #8
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	3301      	adds	r3, #1
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	011b      	lsls	r3, r3, #4
 8001d70:	4413      	add	r3, r2
 8001d72:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	0c1a      	lsrs	r2, r3, #16
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	3302      	adds	r3, #2
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	0e1a      	lsrs	r2, r3, #24
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	3303      	adds	r3, #3
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	4413      	add	r3, r2
 8001da6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	3304      	adds	r3, #4
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	011b      	lsls	r3, r3, #4
 8001dbc:	4413      	add	r3, r2
 8001dbe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	0a1a      	lsrs	r2, r3, #8
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	3305      	adds	r3, #5
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	011b      	lsls	r3, r3, #4
 8001dd6:	4413      	add	r3, r2
 8001dd8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	0c1a      	lsrs	r2, r3, #16
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	3306      	adds	r3, #6
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	011b      	lsls	r3, r3, #4
 8001df0:	4413      	add	r3, r2
 8001df2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	0e1a      	lsrs	r2, r3, #24
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	3307      	adds	r3, #7
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d108      	bne.n	8001e1a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68da      	ldr	r2, [r3, #12]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 0220 	orr.w	r2, r2, #32
 8001e16:	60da      	str	r2, [r3, #12]
 8001e18:	e007      	b.n	8001e2a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	691a      	ldr	r2, [r3, #16]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f042 0220 	orr.w	r2, r2, #32
 8001e28:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	e006      	b.n	8001e3c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e32:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
  }
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	371c      	adds	r7, #28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e58:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d002      	beq.n	8001e66 <HAL_CAN_ActivateNotification+0x1e>
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d109      	bne.n	8001e7a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6959      	ldr	r1, [r3, #20]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	430a      	orrs	r2, r1
 8001e74:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	e006      	b.n	8001e88 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
  }
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08a      	sub	sp, #40	; 0x28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001ed0:	6a3b      	ldr	r3, [r7, #32]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d07c      	beq.n	8001fd4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d023      	beq.n	8001f2c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f983 	bl	8002202 <HAL_CAN_TxMailbox0CompleteCallback>
 8001efc:	e016      	b.n	8001f2c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d004      	beq.n	8001f12 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f10:	e00c      	b.n	8001f2c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d004      	beq.n	8001f26 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
 8001f24:	e002      	b.n	8001f2c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f989 	bl	800223e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d024      	beq.n	8001f80 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f3e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f963 	bl	8002216 <HAL_CAN_TxMailbox1CompleteCallback>
 8001f50:	e016      	b.n	8001f80 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d004      	beq.n	8001f66 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
 8001f64:	e00c      	b.n	8001f80 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d004      	beq.n	8001f7a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
 8001f78:	e002      	b.n	8001f80 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f969 	bl	8002252 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d024      	beq.n	8001fd4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f92:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f943 	bl	800222a <HAL_CAN_TxMailbox2CompleteCallback>
 8001fa4:	e016      	b.n	8001fd4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d004      	beq.n	8001fba <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb8:	e00c      	b.n	8001fd4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d004      	beq.n	8001fce <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fca:	627b      	str	r3, [r7, #36]	; 0x24
 8001fcc:	e002      	b.n	8001fd4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f949 	bl	8002266 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001fd4:	6a3b      	ldr	r3, [r7, #32]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00c      	beq.n	8001ff8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f003 0310 	and.w	r3, r3, #16
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d007      	beq.n	8001ff8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2210      	movs	r2, #16
 8001ff6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001ff8:	6a3b      	ldr	r3, [r7, #32]
 8001ffa:	f003 0304 	and.w	r3, r3, #4
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00b      	beq.n	800201a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	2b00      	cmp	r3, #0
 800200a:	d006      	beq.n	800201a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2208      	movs	r2, #8
 8002012:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f930 	bl	800227a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800201a:	6a3b      	ldr	r3, [r7, #32]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d009      	beq.n	8002038 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d002      	beq.n	8002038 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7fe fdd4 	bl	8000be0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002038:	6a3b      	ldr	r3, [r7, #32]
 800203a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00c      	beq.n	800205c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	f003 0310 	and.w	r3, r3, #16
 8002048:	2b00      	cmp	r3, #0
 800204a:	d007      	beq.n	800205c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002052:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2210      	movs	r2, #16
 800205a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800205c:	6a3b      	ldr	r3, [r7, #32]
 800205e:	f003 0320 	and.w	r3, r3, #32
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00b      	beq.n	800207e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	f003 0308 	and.w	r3, r3, #8
 800206c:	2b00      	cmp	r3, #0
 800206e:	d006      	beq.n	800207e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2208      	movs	r2, #8
 8002076:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 f912 	bl	80022a2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	f003 0310 	and.w	r3, r3, #16
 8002084:	2b00      	cmp	r3, #0
 8002086:	d009      	beq.n	800209c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d002      	beq.n	800209c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f8f9 	bl	800228e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800209c:	6a3b      	ldr	r3, [r7, #32]
 800209e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00b      	beq.n	80020be <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	f003 0310 	and.w	r3, r3, #16
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d006      	beq.n	80020be <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2210      	movs	r2, #16
 80020b6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 f8fc 	bl	80022b6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80020be:	6a3b      	ldr	r3, [r7, #32]
 80020c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00b      	beq.n	80020e0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d006      	beq.n	80020e0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2208      	movs	r2, #8
 80020d8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f8f5 	bl	80022ca <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80020e0:	6a3b      	ldr	r3, [r7, #32]
 80020e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d07b      	beq.n	80021e2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d072      	beq.n	80021da <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80020f4:	6a3b      	ldr	r3, [r7, #32]
 80020f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d008      	beq.n	8002110 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002110:	6a3b      	ldr	r3, [r7, #32]
 8002112:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002116:	2b00      	cmp	r3, #0
 8002118:	d008      	beq.n	800212c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	f043 0302 	orr.w	r3, r3, #2
 800212a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800212c:	6a3b      	ldr	r3, [r7, #32]
 800212e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002132:	2b00      	cmp	r3, #0
 8002134:	d008      	beq.n	8002148 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	f043 0304 	orr.w	r3, r3, #4
 8002146:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002148:	6a3b      	ldr	r3, [r7, #32]
 800214a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800214e:	2b00      	cmp	r3, #0
 8002150:	d043      	beq.n	80021da <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002158:	2b00      	cmp	r3, #0
 800215a:	d03e      	beq.n	80021da <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002162:	2b60      	cmp	r3, #96	; 0x60
 8002164:	d02b      	beq.n	80021be <HAL_CAN_IRQHandler+0x32a>
 8002166:	2b60      	cmp	r3, #96	; 0x60
 8002168:	d82e      	bhi.n	80021c8 <HAL_CAN_IRQHandler+0x334>
 800216a:	2b50      	cmp	r3, #80	; 0x50
 800216c:	d022      	beq.n	80021b4 <HAL_CAN_IRQHandler+0x320>
 800216e:	2b50      	cmp	r3, #80	; 0x50
 8002170:	d82a      	bhi.n	80021c8 <HAL_CAN_IRQHandler+0x334>
 8002172:	2b40      	cmp	r3, #64	; 0x40
 8002174:	d019      	beq.n	80021aa <HAL_CAN_IRQHandler+0x316>
 8002176:	2b40      	cmp	r3, #64	; 0x40
 8002178:	d826      	bhi.n	80021c8 <HAL_CAN_IRQHandler+0x334>
 800217a:	2b30      	cmp	r3, #48	; 0x30
 800217c:	d010      	beq.n	80021a0 <HAL_CAN_IRQHandler+0x30c>
 800217e:	2b30      	cmp	r3, #48	; 0x30
 8002180:	d822      	bhi.n	80021c8 <HAL_CAN_IRQHandler+0x334>
 8002182:	2b10      	cmp	r3, #16
 8002184:	d002      	beq.n	800218c <HAL_CAN_IRQHandler+0x2f8>
 8002186:	2b20      	cmp	r3, #32
 8002188:	d005      	beq.n	8002196 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800218a:	e01d      	b.n	80021c8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	f043 0308 	orr.w	r3, r3, #8
 8002192:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002194:	e019      	b.n	80021ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	f043 0310 	orr.w	r3, r3, #16
 800219c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800219e:	e014      	b.n	80021ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	f043 0320 	orr.w	r3, r3, #32
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021a8:	e00f      	b.n	80021ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021b2:	e00a      	b.n	80021ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021bc:	e005      	b.n	80021ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021c6:	e000      	b.n	80021ca <HAL_CAN_IRQHandler+0x336>
            break;
 80021c8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	699a      	ldr	r2, [r3, #24]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80021d8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2204      	movs	r2, #4
 80021e0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d008      	beq.n	80021fa <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 f872 	bl	80022de <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80021fa:	bf00      	nop
 80021fc:	3728      	adds	r7, #40	; 0x28
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800223e:	b480      	push	{r7}
 8002240:	b083      	sub	sp, #12
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
	...

080022f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002304:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <__NVIC_SetPriorityGrouping+0x44>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002310:	4013      	ands	r3, r2
 8002312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800231c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002326:	4a04      	ldr	r2, [pc, #16]	; (8002338 <__NVIC_SetPriorityGrouping+0x44>)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	60d3      	str	r3, [r2, #12]
}
 800232c:	bf00      	nop
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002340:	4b04      	ldr	r3, [pc, #16]	; (8002354 <__NVIC_GetPriorityGrouping+0x18>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	0a1b      	lsrs	r3, r3, #8
 8002346:	f003 0307 	and.w	r3, r3, #7
}
 800234a:	4618      	mov	r0, r3
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	2b00      	cmp	r3, #0
 8002368:	db0b      	blt.n	8002382 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	f003 021f 	and.w	r2, r3, #31
 8002370:	4907      	ldr	r1, [pc, #28]	; (8002390 <__NVIC_EnableIRQ+0x38>)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	2001      	movs	r0, #1
 800237a:	fa00 f202 	lsl.w	r2, r0, r2
 800237e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	e000e100 	.word	0xe000e100

08002394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	6039      	str	r1, [r7, #0]
 800239e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	db0a      	blt.n	80023be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	490c      	ldr	r1, [pc, #48]	; (80023e0 <__NVIC_SetPriority+0x4c>)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	0112      	lsls	r2, r2, #4
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	440b      	add	r3, r1
 80023b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023bc:	e00a      	b.n	80023d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	4908      	ldr	r1, [pc, #32]	; (80023e4 <__NVIC_SetPriority+0x50>)
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	3b04      	subs	r3, #4
 80023cc:	0112      	lsls	r2, r2, #4
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	440b      	add	r3, r1
 80023d2:	761a      	strb	r2, [r3, #24]
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	e000e100 	.word	0xe000e100
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b089      	sub	sp, #36	; 0x24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f1c3 0307 	rsb	r3, r3, #7
 8002402:	2b04      	cmp	r3, #4
 8002404:	bf28      	it	cs
 8002406:	2304      	movcs	r3, #4
 8002408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3304      	adds	r3, #4
 800240e:	2b06      	cmp	r3, #6
 8002410:	d902      	bls.n	8002418 <NVIC_EncodePriority+0x30>
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3b03      	subs	r3, #3
 8002416:	e000      	b.n	800241a <NVIC_EncodePriority+0x32>
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800241c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43da      	mvns	r2, r3
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	401a      	ands	r2, r3
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002430:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	fa01 f303 	lsl.w	r3, r1, r3
 800243a:	43d9      	mvns	r1, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002440:	4313      	orrs	r3, r2
         );
}
 8002442:	4618      	mov	r0, r3
 8002444:	3724      	adds	r7, #36	; 0x24
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3b01      	subs	r3, #1
 800245c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002460:	d301      	bcc.n	8002466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002462:	2301      	movs	r3, #1
 8002464:	e00f      	b.n	8002486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002466:	4a0a      	ldr	r2, [pc, #40]	; (8002490 <SysTick_Config+0x40>)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3b01      	subs	r3, #1
 800246c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800246e:	210f      	movs	r1, #15
 8002470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002474:	f7ff ff8e 	bl	8002394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002478:	4b05      	ldr	r3, [pc, #20]	; (8002490 <SysTick_Config+0x40>)
 800247a:	2200      	movs	r2, #0
 800247c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800247e:	4b04      	ldr	r3, [pc, #16]	; (8002490 <SysTick_Config+0x40>)
 8002480:	2207      	movs	r2, #7
 8002482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	e000e010 	.word	0xe000e010

08002494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7ff ff29 	bl	80022f4 <__NVIC_SetPriorityGrouping>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b086      	sub	sp, #24
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	4603      	mov	r3, r0
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
 80024b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024bc:	f7ff ff3e 	bl	800233c <__NVIC_GetPriorityGrouping>
 80024c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	68b9      	ldr	r1, [r7, #8]
 80024c6:	6978      	ldr	r0, [r7, #20]
 80024c8:	f7ff ff8e 	bl	80023e8 <NVIC_EncodePriority>
 80024cc:	4602      	mov	r2, r0
 80024ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024d2:	4611      	mov	r1, r2
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff ff5d 	bl	8002394 <__NVIC_SetPriority>
}
 80024da:	bf00      	nop
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	4603      	mov	r3, r0
 80024ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ff31 	bl	8002358 <__NVIC_EnableIRQ>
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff ffa2 	bl	8002450 <SysTick_Config>
 800250c:	4603      	mov	r3, r0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002518:	b480      	push	{r7}
 800251a:	b089      	sub	sp, #36	; 0x24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002526:	2300      	movs	r3, #0
 8002528:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800252a:	2300      	movs	r3, #0
 800252c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800252e:	2300      	movs	r3, #0
 8002530:	61fb      	str	r3, [r7, #28]
 8002532:	e165      	b.n	8002800 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002534:	2201      	movs	r2, #1
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	4013      	ands	r3, r2
 8002546:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	429a      	cmp	r2, r3
 800254e:	f040 8154 	bne.w	80027fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	2b01      	cmp	r3, #1
 800255c:	d005      	beq.n	800256a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002566:	2b02      	cmp	r3, #2
 8002568:	d130      	bne.n	80025cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	2203      	movs	r2, #3
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43db      	mvns	r3, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4013      	ands	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025a0:	2201      	movs	r2, #1
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	091b      	lsrs	r3, r3, #4
 80025b6:	f003 0201 	and.w	r2, r3, #1
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	d017      	beq.n	8002608 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	2203      	movs	r2, #3
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d123      	bne.n	800265c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	08da      	lsrs	r2, r3, #3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3208      	adds	r2, #8
 800261c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002620:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	220f      	movs	r2, #15
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	691a      	ldr	r2, [r3, #16]
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	08da      	lsrs	r2, r3, #3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3208      	adds	r2, #8
 8002656:	69b9      	ldr	r1, [r7, #24]
 8002658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	2203      	movs	r2, #3
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 0203 	and.w	r2, r3, #3
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 80ae 	beq.w	80027fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	4b5d      	ldr	r3, [pc, #372]	; (8002818 <HAL_GPIO_Init+0x300>)
 80026a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a6:	4a5c      	ldr	r2, [pc, #368]	; (8002818 <HAL_GPIO_Init+0x300>)
 80026a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ac:	6453      	str	r3, [r2, #68]	; 0x44
 80026ae:	4b5a      	ldr	r3, [pc, #360]	; (8002818 <HAL_GPIO_Init+0x300>)
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ba:	4a58      	ldr	r2, [pc, #352]	; (800281c <HAL_GPIO_Init+0x304>)
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	089b      	lsrs	r3, r3, #2
 80026c0:	3302      	adds	r3, #2
 80026c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	220f      	movs	r2, #15
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a4f      	ldr	r2, [pc, #316]	; (8002820 <HAL_GPIO_Init+0x308>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d025      	beq.n	8002732 <HAL_GPIO_Init+0x21a>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a4e      	ldr	r2, [pc, #312]	; (8002824 <HAL_GPIO_Init+0x30c>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d01f      	beq.n	800272e <HAL_GPIO_Init+0x216>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a4d      	ldr	r2, [pc, #308]	; (8002828 <HAL_GPIO_Init+0x310>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d019      	beq.n	800272a <HAL_GPIO_Init+0x212>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a4c      	ldr	r2, [pc, #304]	; (800282c <HAL_GPIO_Init+0x314>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d013      	beq.n	8002726 <HAL_GPIO_Init+0x20e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a4b      	ldr	r2, [pc, #300]	; (8002830 <HAL_GPIO_Init+0x318>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d00d      	beq.n	8002722 <HAL_GPIO_Init+0x20a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a4a      	ldr	r2, [pc, #296]	; (8002834 <HAL_GPIO_Init+0x31c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d007      	beq.n	800271e <HAL_GPIO_Init+0x206>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a49      	ldr	r2, [pc, #292]	; (8002838 <HAL_GPIO_Init+0x320>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d101      	bne.n	800271a <HAL_GPIO_Init+0x202>
 8002716:	2306      	movs	r3, #6
 8002718:	e00c      	b.n	8002734 <HAL_GPIO_Init+0x21c>
 800271a:	2307      	movs	r3, #7
 800271c:	e00a      	b.n	8002734 <HAL_GPIO_Init+0x21c>
 800271e:	2305      	movs	r3, #5
 8002720:	e008      	b.n	8002734 <HAL_GPIO_Init+0x21c>
 8002722:	2304      	movs	r3, #4
 8002724:	e006      	b.n	8002734 <HAL_GPIO_Init+0x21c>
 8002726:	2303      	movs	r3, #3
 8002728:	e004      	b.n	8002734 <HAL_GPIO_Init+0x21c>
 800272a:	2302      	movs	r3, #2
 800272c:	e002      	b.n	8002734 <HAL_GPIO_Init+0x21c>
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <HAL_GPIO_Init+0x21c>
 8002732:	2300      	movs	r3, #0
 8002734:	69fa      	ldr	r2, [r7, #28]
 8002736:	f002 0203 	and.w	r2, r2, #3
 800273a:	0092      	lsls	r2, r2, #2
 800273c:	4093      	lsls	r3, r2
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002744:	4935      	ldr	r1, [pc, #212]	; (800281c <HAL_GPIO_Init+0x304>)
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	089b      	lsrs	r3, r3, #2
 800274a:	3302      	adds	r3, #2
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002752:	4b3a      	ldr	r3, [pc, #232]	; (800283c <HAL_GPIO_Init+0x324>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	43db      	mvns	r3, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4013      	ands	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002776:	4a31      	ldr	r2, [pc, #196]	; (800283c <HAL_GPIO_Init+0x324>)
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800277c:	4b2f      	ldr	r3, [pc, #188]	; (800283c <HAL_GPIO_Init+0x324>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027a0:	4a26      	ldr	r2, [pc, #152]	; (800283c <HAL_GPIO_Init+0x324>)
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027a6:	4b25      	ldr	r3, [pc, #148]	; (800283c <HAL_GPIO_Init+0x324>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	43db      	mvns	r3, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4013      	ands	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027ca:	4a1c      	ldr	r2, [pc, #112]	; (800283c <HAL_GPIO_Init+0x324>)
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027d0:	4b1a      	ldr	r3, [pc, #104]	; (800283c <HAL_GPIO_Init+0x324>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027f4:	4a11      	ldr	r2, [pc, #68]	; (800283c <HAL_GPIO_Init+0x324>)
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	3301      	adds	r3, #1
 80027fe:	61fb      	str	r3, [r7, #28]
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	2b0f      	cmp	r3, #15
 8002804:	f67f ae96 	bls.w	8002534 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002808:	bf00      	nop
 800280a:	bf00      	nop
 800280c:	3724      	adds	r7, #36	; 0x24
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	40023800 	.word	0x40023800
 800281c:	40013800 	.word	0x40013800
 8002820:	40020000 	.word	0x40020000
 8002824:	40020400 	.word	0x40020400
 8002828:	40020800 	.word	0x40020800
 800282c:	40020c00 	.word	0x40020c00
 8002830:	40021000 	.word	0x40021000
 8002834:	40021400 	.word	0x40021400
 8002838:	40021800 	.word	0x40021800
 800283c:	40013c00 	.word	0x40013c00

08002840 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	807b      	strh	r3, [r7, #2]
 800284c:	4613      	mov	r3, r2
 800284e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002850:	787b      	ldrb	r3, [r7, #1]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002856:	887a      	ldrh	r2, [r7, #2]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800285c:	e003      	b.n	8002866 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800285e:	887b      	ldrh	r3, [r7, #2]
 8002860:	041a      	lsls	r2, r3, #16
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	619a      	str	r2, [r3, #24]
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
	...

08002874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e0cc      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002888:	4b68      	ldr	r3, [pc, #416]	; (8002a2c <HAL_RCC_ClockConfig+0x1b8>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 030f 	and.w	r3, r3, #15
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d90c      	bls.n	80028b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002896:	4b65      	ldr	r3, [pc, #404]	; (8002a2c <HAL_RCC_ClockConfig+0x1b8>)
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800289e:	4b63      	ldr	r3, [pc, #396]	; (8002a2c <HAL_RCC_ClockConfig+0x1b8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d001      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e0b8      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d020      	beq.n	80028fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d005      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028c8:	4b59      	ldr	r3, [pc, #356]	; (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	4a58      	ldr	r2, [pc, #352]	; (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80028ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0308 	and.w	r3, r3, #8
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d005      	beq.n	80028ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028e0:	4b53      	ldr	r3, [pc, #332]	; (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	4a52      	ldr	r2, [pc, #328]	; (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80028e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028ec:	4b50      	ldr	r3, [pc, #320]	; (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	494d      	ldr	r1, [pc, #308]	; (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	d044      	beq.n	8002994 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d107      	bne.n	8002922 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002912:	4b47      	ldr	r3, [pc, #284]	; (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d119      	bne.n	8002952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e07f      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b02      	cmp	r3, #2
 8002928:	d003      	beq.n	8002932 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800292e:	2b03      	cmp	r3, #3
 8002930:	d107      	bne.n	8002942 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002932:	4b3f      	ldr	r3, [pc, #252]	; (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d109      	bne.n	8002952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e06f      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002942:	4b3b      	ldr	r3, [pc, #236]	; (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e067      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002952:	4b37      	ldr	r3, [pc, #220]	; (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f023 0203 	bic.w	r2, r3, #3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	4934      	ldr	r1, [pc, #208]	; (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 8002960:	4313      	orrs	r3, r2
 8002962:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002964:	f7fe fe22 	bl	80015ac <HAL_GetTick>
 8002968:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296a:	e00a      	b.n	8002982 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800296c:	f7fe fe1e 	bl	80015ac <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	f241 3288 	movw	r2, #5000	; 0x1388
 800297a:	4293      	cmp	r3, r2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e04f      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002982:	4b2b      	ldr	r3, [pc, #172]	; (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 020c 	and.w	r2, r3, #12
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	429a      	cmp	r2, r3
 8002992:	d1eb      	bne.n	800296c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002994:	4b25      	ldr	r3, [pc, #148]	; (8002a2c <HAL_RCC_ClockConfig+0x1b8>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 030f 	and.w	r3, r3, #15
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d20c      	bcs.n	80029bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a2:	4b22      	ldr	r3, [pc, #136]	; (8002a2c <HAL_RCC_ClockConfig+0x1b8>)
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029aa:	4b20      	ldr	r3, [pc, #128]	; (8002a2c <HAL_RCC_ClockConfig+0x1b8>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d001      	beq.n	80029bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e032      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d008      	beq.n	80029da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029c8:	4b19      	ldr	r3, [pc, #100]	; (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	4916      	ldr	r1, [pc, #88]	; (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d009      	beq.n	80029fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029e6:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	490e      	ldr	r1, [pc, #56]	; (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029fa:	f000 f855 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 80029fe:	4602      	mov	r2, r0
 8002a00:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	091b      	lsrs	r3, r3, #4
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	490a      	ldr	r1, [pc, #40]	; (8002a34 <HAL_RCC_ClockConfig+0x1c0>)
 8002a0c:	5ccb      	ldrb	r3, [r1, r3]
 8002a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a12:	4a09      	ldr	r2, [pc, #36]	; (8002a38 <HAL_RCC_ClockConfig+0x1c4>)
 8002a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a16:	4b09      	ldr	r3, [pc, #36]	; (8002a3c <HAL_RCC_ClockConfig+0x1c8>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fe fd82 	bl	8001524 <HAL_InitTick>

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40023c00 	.word	0x40023c00
 8002a30:	40023800 	.word	0x40023800
 8002a34:	08004d04 	.word	0x08004d04
 8002a38:	20000000 	.word	0x20000000
 8002a3c:	20000004 	.word	0x20000004

08002a40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a44:	4b03      	ldr	r3, [pc, #12]	; (8002a54 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a46:	681b      	ldr	r3, [r3, #0]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	20000000 	.word	0x20000000

08002a58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a5c:	f7ff fff0 	bl	8002a40 <HAL_RCC_GetHCLKFreq>
 8002a60:	4602      	mov	r2, r0
 8002a62:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	0a9b      	lsrs	r3, r3, #10
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	4903      	ldr	r1, [pc, #12]	; (8002a7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a6e:	5ccb      	ldrb	r3, [r1, r3]
 8002a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	08004d14 	.word	0x08004d14

08002a80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a84:	f7ff ffdc 	bl	8002a40 <HAL_RCC_GetHCLKFreq>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	0b5b      	lsrs	r3, r3, #13
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	4903      	ldr	r1, [pc, #12]	; (8002aa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a96:	5ccb      	ldrb	r3, [r1, r3]
 8002a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	08004d14 	.word	0x08004d14

08002aa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002aac:	b0ae      	sub	sp, #184	; 0xb8
 8002aae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ace:	4bcb      	ldr	r3, [pc, #812]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x354>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
 8002ad6:	2b0c      	cmp	r3, #12
 8002ad8:	f200 8206 	bhi.w	8002ee8 <HAL_RCC_GetSysClockFreq+0x440>
 8002adc:	a201      	add	r2, pc, #4	; (adr r2, 8002ae4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae2:	bf00      	nop
 8002ae4:	08002b19 	.word	0x08002b19
 8002ae8:	08002ee9 	.word	0x08002ee9
 8002aec:	08002ee9 	.word	0x08002ee9
 8002af0:	08002ee9 	.word	0x08002ee9
 8002af4:	08002b21 	.word	0x08002b21
 8002af8:	08002ee9 	.word	0x08002ee9
 8002afc:	08002ee9 	.word	0x08002ee9
 8002b00:	08002ee9 	.word	0x08002ee9
 8002b04:	08002b29 	.word	0x08002b29
 8002b08:	08002ee9 	.word	0x08002ee9
 8002b0c:	08002ee9 	.word	0x08002ee9
 8002b10:	08002ee9 	.word	0x08002ee9
 8002b14:	08002d19 	.word	0x08002d19
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b18:	4bb9      	ldr	r3, [pc, #740]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x358>)
 8002b1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002b1e:	e1e7      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b20:	4bb8      	ldr	r3, [pc, #736]	; (8002e04 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002b22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002b26:	e1e3      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b28:	4bb4      	ldr	r3, [pc, #720]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x354>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b34:	4bb1      	ldr	r3, [pc, #708]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x354>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d071      	beq.n	8002c24 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b40:	4bae      	ldr	r3, [pc, #696]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x354>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	099b      	lsrs	r3, r3, #6
 8002b46:	2200      	movs	r2, #0
 8002b48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b4c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002b50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002b66:	4622      	mov	r2, r4
 8002b68:	462b      	mov	r3, r5
 8002b6a:	f04f 0000 	mov.w	r0, #0
 8002b6e:	f04f 0100 	mov.w	r1, #0
 8002b72:	0159      	lsls	r1, r3, #5
 8002b74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b78:	0150      	lsls	r0, r2, #5
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4621      	mov	r1, r4
 8002b80:	1a51      	subs	r1, r2, r1
 8002b82:	6439      	str	r1, [r7, #64]	; 0x40
 8002b84:	4629      	mov	r1, r5
 8002b86:	eb63 0301 	sbc.w	r3, r3, r1
 8002b8a:	647b      	str	r3, [r7, #68]	; 0x44
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002b98:	4649      	mov	r1, r9
 8002b9a:	018b      	lsls	r3, r1, #6
 8002b9c:	4641      	mov	r1, r8
 8002b9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ba2:	4641      	mov	r1, r8
 8002ba4:	018a      	lsls	r2, r1, #6
 8002ba6:	4641      	mov	r1, r8
 8002ba8:	1a51      	subs	r1, r2, r1
 8002baa:	63b9      	str	r1, [r7, #56]	; 0x38
 8002bac:	4649      	mov	r1, r9
 8002bae:	eb63 0301 	sbc.w	r3, r3, r1
 8002bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	f04f 0300 	mov.w	r3, #0
 8002bbc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002bc0:	4649      	mov	r1, r9
 8002bc2:	00cb      	lsls	r3, r1, #3
 8002bc4:	4641      	mov	r1, r8
 8002bc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bca:	4641      	mov	r1, r8
 8002bcc:	00ca      	lsls	r2, r1, #3
 8002bce:	4610      	mov	r0, r2
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	4622      	mov	r2, r4
 8002bd6:	189b      	adds	r3, r3, r2
 8002bd8:	633b      	str	r3, [r7, #48]	; 0x30
 8002bda:	462b      	mov	r3, r5
 8002bdc:	460a      	mov	r2, r1
 8002bde:	eb42 0303 	adc.w	r3, r2, r3
 8002be2:	637b      	str	r3, [r7, #52]	; 0x34
 8002be4:	f04f 0200 	mov.w	r2, #0
 8002be8:	f04f 0300 	mov.w	r3, #0
 8002bec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002bf0:	4629      	mov	r1, r5
 8002bf2:	024b      	lsls	r3, r1, #9
 8002bf4:	4621      	mov	r1, r4
 8002bf6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bfa:	4621      	mov	r1, r4
 8002bfc:	024a      	lsls	r2, r1, #9
 8002bfe:	4610      	mov	r0, r2
 8002c00:	4619      	mov	r1, r3
 8002c02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c06:	2200      	movs	r2, #0
 8002c08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002c10:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002c14:	f7fd fe52 	bl	80008bc <__aeabi_uldivmod>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c22:	e067      	b.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c24:	4b75      	ldr	r3, [pc, #468]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x354>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	099b      	lsrs	r3, r3, #6
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c30:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002c34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c3e:	2300      	movs	r3, #0
 8002c40:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c42:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002c46:	4622      	mov	r2, r4
 8002c48:	462b      	mov	r3, r5
 8002c4a:	f04f 0000 	mov.w	r0, #0
 8002c4e:	f04f 0100 	mov.w	r1, #0
 8002c52:	0159      	lsls	r1, r3, #5
 8002c54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c58:	0150      	lsls	r0, r2, #5
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	4621      	mov	r1, r4
 8002c60:	1a51      	subs	r1, r2, r1
 8002c62:	62b9      	str	r1, [r7, #40]	; 0x28
 8002c64:	4629      	mov	r1, r5
 8002c66:	eb63 0301 	sbc.w	r3, r3, r1
 8002c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c6c:	f04f 0200 	mov.w	r2, #0
 8002c70:	f04f 0300 	mov.w	r3, #0
 8002c74:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002c78:	4649      	mov	r1, r9
 8002c7a:	018b      	lsls	r3, r1, #6
 8002c7c:	4641      	mov	r1, r8
 8002c7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c82:	4641      	mov	r1, r8
 8002c84:	018a      	lsls	r2, r1, #6
 8002c86:	4641      	mov	r1, r8
 8002c88:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c8c:	4649      	mov	r1, r9
 8002c8e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	f04f 0300 	mov.w	r3, #0
 8002c9a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c9e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ca2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ca6:	4692      	mov	sl, r2
 8002ca8:	469b      	mov	fp, r3
 8002caa:	4623      	mov	r3, r4
 8002cac:	eb1a 0303 	adds.w	r3, sl, r3
 8002cb0:	623b      	str	r3, [r7, #32]
 8002cb2:	462b      	mov	r3, r5
 8002cb4:	eb4b 0303 	adc.w	r3, fp, r3
 8002cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	f04f 0300 	mov.w	r3, #0
 8002cc2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002cc6:	4629      	mov	r1, r5
 8002cc8:	028b      	lsls	r3, r1, #10
 8002cca:	4621      	mov	r1, r4
 8002ccc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cd0:	4621      	mov	r1, r4
 8002cd2:	028a      	lsls	r2, r1, #10
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002cdc:	2200      	movs	r2, #0
 8002cde:	673b      	str	r3, [r7, #112]	; 0x70
 8002ce0:	677a      	str	r2, [r7, #116]	; 0x74
 8002ce2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002ce6:	f7fd fde9 	bl	80008bc <__aeabi_uldivmod>
 8002cea:	4602      	mov	r2, r0
 8002cec:	460b      	mov	r3, r1
 8002cee:	4613      	mov	r3, r2
 8002cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cf4:	4b41      	ldr	r3, [pc, #260]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x354>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	0c1b      	lsrs	r3, r3, #16
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	3301      	adds	r3, #1
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002d06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d16:	e0eb      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d18:	4b38      	ldr	r3, [pc, #224]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x354>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d24:	4b35      	ldr	r3, [pc, #212]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x354>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d06b      	beq.n	8002e08 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d30:	4b32      	ldr	r3, [pc, #200]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x354>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	099b      	lsrs	r3, r3, #6
 8002d36:	2200      	movs	r2, #0
 8002d38:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d42:	663b      	str	r3, [r7, #96]	; 0x60
 8002d44:	2300      	movs	r3, #0
 8002d46:	667b      	str	r3, [r7, #100]	; 0x64
 8002d48:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002d4c:	4622      	mov	r2, r4
 8002d4e:	462b      	mov	r3, r5
 8002d50:	f04f 0000 	mov.w	r0, #0
 8002d54:	f04f 0100 	mov.w	r1, #0
 8002d58:	0159      	lsls	r1, r3, #5
 8002d5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d5e:	0150      	lsls	r0, r2, #5
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4621      	mov	r1, r4
 8002d66:	1a51      	subs	r1, r2, r1
 8002d68:	61b9      	str	r1, [r7, #24]
 8002d6a:	4629      	mov	r1, r5
 8002d6c:	eb63 0301 	sbc.w	r3, r3, r1
 8002d70:	61fb      	str	r3, [r7, #28]
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002d7e:	4659      	mov	r1, fp
 8002d80:	018b      	lsls	r3, r1, #6
 8002d82:	4651      	mov	r1, sl
 8002d84:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d88:	4651      	mov	r1, sl
 8002d8a:	018a      	lsls	r2, r1, #6
 8002d8c:	4651      	mov	r1, sl
 8002d8e:	ebb2 0801 	subs.w	r8, r2, r1
 8002d92:	4659      	mov	r1, fp
 8002d94:	eb63 0901 	sbc.w	r9, r3, r1
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	f04f 0300 	mov.w	r3, #0
 8002da0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002da4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002da8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dac:	4690      	mov	r8, r2
 8002dae:	4699      	mov	r9, r3
 8002db0:	4623      	mov	r3, r4
 8002db2:	eb18 0303 	adds.w	r3, r8, r3
 8002db6:	613b      	str	r3, [r7, #16]
 8002db8:	462b      	mov	r3, r5
 8002dba:	eb49 0303 	adc.w	r3, r9, r3
 8002dbe:	617b      	str	r3, [r7, #20]
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	f04f 0300 	mov.w	r3, #0
 8002dc8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002dcc:	4629      	mov	r1, r5
 8002dce:	024b      	lsls	r3, r1, #9
 8002dd0:	4621      	mov	r1, r4
 8002dd2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dd6:	4621      	mov	r1, r4
 8002dd8:	024a      	lsls	r2, r1, #9
 8002dda:	4610      	mov	r0, r2
 8002ddc:	4619      	mov	r1, r3
 8002dde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002de2:	2200      	movs	r2, #0
 8002de4:	65bb      	str	r3, [r7, #88]	; 0x58
 8002de6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002de8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002dec:	f7fd fd66 	bl	80008bc <__aeabi_uldivmod>
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	4613      	mov	r3, r2
 8002df6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002dfa:	e065      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x420>
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	00f42400 	.word	0x00f42400
 8002e04:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e08:	4b3d      	ldr	r3, [pc, #244]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x458>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	099b      	lsrs	r3, r3, #6
 8002e0e:	2200      	movs	r2, #0
 8002e10:	4618      	mov	r0, r3
 8002e12:	4611      	mov	r1, r2
 8002e14:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e18:	653b      	str	r3, [r7, #80]	; 0x50
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	657b      	str	r3, [r7, #84]	; 0x54
 8002e1e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002e22:	4642      	mov	r2, r8
 8002e24:	464b      	mov	r3, r9
 8002e26:	f04f 0000 	mov.w	r0, #0
 8002e2a:	f04f 0100 	mov.w	r1, #0
 8002e2e:	0159      	lsls	r1, r3, #5
 8002e30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e34:	0150      	lsls	r0, r2, #5
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	4641      	mov	r1, r8
 8002e3c:	1a51      	subs	r1, r2, r1
 8002e3e:	60b9      	str	r1, [r7, #8]
 8002e40:	4649      	mov	r1, r9
 8002e42:	eb63 0301 	sbc.w	r3, r3, r1
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002e54:	4659      	mov	r1, fp
 8002e56:	018b      	lsls	r3, r1, #6
 8002e58:	4651      	mov	r1, sl
 8002e5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e5e:	4651      	mov	r1, sl
 8002e60:	018a      	lsls	r2, r1, #6
 8002e62:	4651      	mov	r1, sl
 8002e64:	1a54      	subs	r4, r2, r1
 8002e66:	4659      	mov	r1, fp
 8002e68:	eb63 0501 	sbc.w	r5, r3, r1
 8002e6c:	f04f 0200 	mov.w	r2, #0
 8002e70:	f04f 0300 	mov.w	r3, #0
 8002e74:	00eb      	lsls	r3, r5, #3
 8002e76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e7a:	00e2      	lsls	r2, r4, #3
 8002e7c:	4614      	mov	r4, r2
 8002e7e:	461d      	mov	r5, r3
 8002e80:	4643      	mov	r3, r8
 8002e82:	18e3      	adds	r3, r4, r3
 8002e84:	603b      	str	r3, [r7, #0]
 8002e86:	464b      	mov	r3, r9
 8002e88:	eb45 0303 	adc.w	r3, r5, r3
 8002e8c:	607b      	str	r3, [r7, #4]
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e9a:	4629      	mov	r1, r5
 8002e9c:	028b      	lsls	r3, r1, #10
 8002e9e:	4621      	mov	r1, r4
 8002ea0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ea4:	4621      	mov	r1, r4
 8002ea6:	028a      	lsls	r2, r1, #10
 8002ea8:	4610      	mov	r0, r2
 8002eaa:	4619      	mov	r1, r3
 8002eac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002eb4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002eb6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002eba:	f7fd fcff 	bl	80008bc <__aeabi_uldivmod>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002ec8:	4b0d      	ldr	r3, [pc, #52]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x458>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	0f1b      	lsrs	r3, r3, #28
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002ed6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002eda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ee6:	e003      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ee8:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002eea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002eee:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ef0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	37b8      	adds	r7, #184	; 0xb8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002efe:	bf00      	nop
 8002f00:	40023800 	.word	0x40023800
 8002f04:	00f42400 	.word	0x00f42400

08002f08 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e28d      	b.n	8003436 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 8083 	beq.w	800302e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f28:	4b94      	ldr	r3, [pc, #592]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 030c 	and.w	r3, r3, #12
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d019      	beq.n	8002f68 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f34:	4b91      	ldr	r3, [pc, #580]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f3c:	2b08      	cmp	r3, #8
 8002f3e:	d106      	bne.n	8002f4e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f40:	4b8e      	ldr	r3, [pc, #568]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f4c:	d00c      	beq.n	8002f68 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f4e:	4b8b      	ldr	r3, [pc, #556]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f56:	2b0c      	cmp	r3, #12
 8002f58:	d112      	bne.n	8002f80 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f5a:	4b88      	ldr	r3, [pc, #544]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f66:	d10b      	bne.n	8002f80 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f68:	4b84      	ldr	r3, [pc, #528]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d05b      	beq.n	800302c <HAL_RCC_OscConfig+0x124>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d157      	bne.n	800302c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e25a      	b.n	8003436 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f88:	d106      	bne.n	8002f98 <HAL_RCC_OscConfig+0x90>
 8002f8a:	4b7c      	ldr	r3, [pc, #496]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a7b      	ldr	r2, [pc, #492]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8002f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	e01d      	b.n	8002fd4 <HAL_RCC_OscConfig+0xcc>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fa0:	d10c      	bne.n	8002fbc <HAL_RCC_OscConfig+0xb4>
 8002fa2:	4b76      	ldr	r3, [pc, #472]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a75      	ldr	r2, [pc, #468]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8002fa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	4b73      	ldr	r3, [pc, #460]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a72      	ldr	r2, [pc, #456]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8002fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	e00b      	b.n	8002fd4 <HAL_RCC_OscConfig+0xcc>
 8002fbc:	4b6f      	ldr	r3, [pc, #444]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a6e      	ldr	r2, [pc, #440]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8002fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc6:	6013      	str	r3, [r2, #0]
 8002fc8:	4b6c      	ldr	r3, [pc, #432]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a6b      	ldr	r2, [pc, #428]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8002fce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d013      	beq.n	8003004 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7fe fae6 	bl	80015ac <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fe4:	f7fe fae2 	bl	80015ac <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b64      	cmp	r3, #100	; 0x64
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e21f      	b.n	8003436 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff6:	4b61      	ldr	r3, [pc, #388]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0xdc>
 8003002:	e014      	b.n	800302e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003004:	f7fe fad2 	bl	80015ac <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800300c:	f7fe face 	bl	80015ac <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b64      	cmp	r3, #100	; 0x64
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e20b      	b.n	8003436 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301e:	4b57      	ldr	r3, [pc, #348]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0x104>
 800302a:	e000      	b.n	800302e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800302c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d06f      	beq.n	800311a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800303a:	4b50      	ldr	r3, [pc, #320]	; (800317c <HAL_RCC_OscConfig+0x274>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 030c 	and.w	r3, r3, #12
 8003042:	2b00      	cmp	r3, #0
 8003044:	d017      	beq.n	8003076 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003046:	4b4d      	ldr	r3, [pc, #308]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800304e:	2b08      	cmp	r3, #8
 8003050:	d105      	bne.n	800305e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003052:	4b4a      	ldr	r3, [pc, #296]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00b      	beq.n	8003076 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800305e:	4b47      	ldr	r3, [pc, #284]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003066:	2b0c      	cmp	r3, #12
 8003068:	d11c      	bne.n	80030a4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800306a:	4b44      	ldr	r3, [pc, #272]	; (800317c <HAL_RCC_OscConfig+0x274>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d116      	bne.n	80030a4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003076:	4b41      	ldr	r3, [pc, #260]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d005      	beq.n	800308e <HAL_RCC_OscConfig+0x186>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d001      	beq.n	800308e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e1d3      	b.n	8003436 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800308e:	4b3b      	ldr	r3, [pc, #236]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	4937      	ldr	r1, [pc, #220]	; (800317c <HAL_RCC_OscConfig+0x274>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030a2:	e03a      	b.n	800311a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d020      	beq.n	80030ee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030ac:	4b34      	ldr	r3, [pc, #208]	; (8003180 <HAL_RCC_OscConfig+0x278>)
 80030ae:	2201      	movs	r2, #1
 80030b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b2:	f7fe fa7b 	bl	80015ac <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ba:	f7fe fa77 	bl	80015ac <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e1b4      	b.n	8003436 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030cc:	4b2b      	ldr	r3, [pc, #172]	; (800317c <HAL_RCC_OscConfig+0x274>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0f0      	beq.n	80030ba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d8:	4b28      	ldr	r3, [pc, #160]	; (800317c <HAL_RCC_OscConfig+0x274>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	4925      	ldr	r1, [pc, #148]	; (800317c <HAL_RCC_OscConfig+0x274>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	600b      	str	r3, [r1, #0]
 80030ec:	e015      	b.n	800311a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ee:	4b24      	ldr	r3, [pc, #144]	; (8003180 <HAL_RCC_OscConfig+0x278>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f4:	f7fe fa5a 	bl	80015ac <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030fc:	f7fe fa56 	bl	80015ac <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e193      	b.n	8003436 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800310e:	4b1b      	ldr	r3, [pc, #108]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1f0      	bne.n	80030fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b00      	cmp	r3, #0
 8003124:	d036      	beq.n	8003194 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d016      	beq.n	800315c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800312e:	4b15      	ldr	r3, [pc, #84]	; (8003184 <HAL_RCC_OscConfig+0x27c>)
 8003130:	2201      	movs	r2, #1
 8003132:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003134:	f7fe fa3a 	bl	80015ac <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800313c:	f7fe fa36 	bl	80015ac <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e173      	b.n	8003436 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800314e:	4b0b      	ldr	r3, [pc, #44]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8003150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0f0      	beq.n	800313c <HAL_RCC_OscConfig+0x234>
 800315a:	e01b      	b.n	8003194 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800315c:	4b09      	ldr	r3, [pc, #36]	; (8003184 <HAL_RCC_OscConfig+0x27c>)
 800315e:	2200      	movs	r2, #0
 8003160:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003162:	f7fe fa23 	bl	80015ac <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003168:	e00e      	b.n	8003188 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800316a:	f7fe fa1f 	bl	80015ac <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d907      	bls.n	8003188 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e15c      	b.n	8003436 <HAL_RCC_OscConfig+0x52e>
 800317c:	40023800 	.word	0x40023800
 8003180:	42470000 	.word	0x42470000
 8003184:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003188:	4b8a      	ldr	r3, [pc, #552]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 800318a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1ea      	bne.n	800316a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 8097 	beq.w	80032d0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031a2:	2300      	movs	r3, #0
 80031a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031a6:	4b83      	ldr	r3, [pc, #524]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10f      	bne.n	80031d2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031b2:	2300      	movs	r3, #0
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	4b7f      	ldr	r3, [pc, #508]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	4a7e      	ldr	r2, [pc, #504]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 80031bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c0:	6413      	str	r3, [r2, #64]	; 0x40
 80031c2:	4b7c      	ldr	r3, [pc, #496]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ca:	60bb      	str	r3, [r7, #8]
 80031cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ce:	2301      	movs	r3, #1
 80031d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d2:	4b79      	ldr	r3, [pc, #484]	; (80033b8 <HAL_RCC_OscConfig+0x4b0>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d118      	bne.n	8003210 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031de:	4b76      	ldr	r3, [pc, #472]	; (80033b8 <HAL_RCC_OscConfig+0x4b0>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a75      	ldr	r2, [pc, #468]	; (80033b8 <HAL_RCC_OscConfig+0x4b0>)
 80031e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ea:	f7fe f9df 	bl	80015ac <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031f2:	f7fe f9db 	bl	80015ac <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e118      	b.n	8003436 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003204:	4b6c      	ldr	r3, [pc, #432]	; (80033b8 <HAL_RCC_OscConfig+0x4b0>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0f0      	beq.n	80031f2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d106      	bne.n	8003226 <HAL_RCC_OscConfig+0x31e>
 8003218:	4b66      	ldr	r3, [pc, #408]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 800321a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321c:	4a65      	ldr	r2, [pc, #404]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 800321e:	f043 0301 	orr.w	r3, r3, #1
 8003222:	6713      	str	r3, [r2, #112]	; 0x70
 8003224:	e01c      	b.n	8003260 <HAL_RCC_OscConfig+0x358>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	2b05      	cmp	r3, #5
 800322c:	d10c      	bne.n	8003248 <HAL_RCC_OscConfig+0x340>
 800322e:	4b61      	ldr	r3, [pc, #388]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 8003230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003232:	4a60      	ldr	r2, [pc, #384]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 8003234:	f043 0304 	orr.w	r3, r3, #4
 8003238:	6713      	str	r3, [r2, #112]	; 0x70
 800323a:	4b5e      	ldr	r3, [pc, #376]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 800323c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323e:	4a5d      	ldr	r2, [pc, #372]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 8003240:	f043 0301 	orr.w	r3, r3, #1
 8003244:	6713      	str	r3, [r2, #112]	; 0x70
 8003246:	e00b      	b.n	8003260 <HAL_RCC_OscConfig+0x358>
 8003248:	4b5a      	ldr	r3, [pc, #360]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 800324a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324c:	4a59      	ldr	r2, [pc, #356]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 800324e:	f023 0301 	bic.w	r3, r3, #1
 8003252:	6713      	str	r3, [r2, #112]	; 0x70
 8003254:	4b57      	ldr	r3, [pc, #348]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 8003256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003258:	4a56      	ldr	r2, [pc, #344]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 800325a:	f023 0304 	bic.w	r3, r3, #4
 800325e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d015      	beq.n	8003294 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003268:	f7fe f9a0 	bl	80015ac <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800326e:	e00a      	b.n	8003286 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003270:	f7fe f99c 	bl	80015ac <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	f241 3288 	movw	r2, #5000	; 0x1388
 800327e:	4293      	cmp	r3, r2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e0d7      	b.n	8003436 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003286:	4b4b      	ldr	r3, [pc, #300]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 8003288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0ee      	beq.n	8003270 <HAL_RCC_OscConfig+0x368>
 8003292:	e014      	b.n	80032be <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003294:	f7fe f98a 	bl	80015ac <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800329a:	e00a      	b.n	80032b2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800329c:	f7fe f986 	bl	80015ac <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e0c1      	b.n	8003436 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032b2:	4b40      	ldr	r3, [pc, #256]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 80032b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1ee      	bne.n	800329c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032be:	7dfb      	ldrb	r3, [r7, #23]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d105      	bne.n	80032d0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c4:	4b3b      	ldr	r3, [pc, #236]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	4a3a      	ldr	r2, [pc, #232]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 80032ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 80ad 	beq.w	8003434 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032da:	4b36      	ldr	r3, [pc, #216]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 030c 	and.w	r3, r3, #12
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	d060      	beq.n	80033a8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d145      	bne.n	800337a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ee:	4b33      	ldr	r3, [pc, #204]	; (80033bc <HAL_RCC_OscConfig+0x4b4>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f4:	f7fe f95a 	bl	80015ac <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032fc:	f7fe f956 	bl	80015ac <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e093      	b.n	8003436 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330e:	4b29      	ldr	r3, [pc, #164]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f0      	bne.n	80032fc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69da      	ldr	r2, [r3, #28]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	019b      	lsls	r3, r3, #6
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003330:	085b      	lsrs	r3, r3, #1
 8003332:	3b01      	subs	r3, #1
 8003334:	041b      	lsls	r3, r3, #16
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333c:	061b      	lsls	r3, r3, #24
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003344:	071b      	lsls	r3, r3, #28
 8003346:	491b      	ldr	r1, [pc, #108]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 8003348:	4313      	orrs	r3, r2
 800334a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800334c:	4b1b      	ldr	r3, [pc, #108]	; (80033bc <HAL_RCC_OscConfig+0x4b4>)
 800334e:	2201      	movs	r2, #1
 8003350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003352:	f7fe f92b 	bl	80015ac <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800335a:	f7fe f927 	bl	80015ac <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e064      	b.n	8003436 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800336c:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0f0      	beq.n	800335a <HAL_RCC_OscConfig+0x452>
 8003378:	e05c      	b.n	8003434 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800337a:	4b10      	ldr	r3, [pc, #64]	; (80033bc <HAL_RCC_OscConfig+0x4b4>)
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003380:	f7fe f914 	bl	80015ac <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003388:	f7fe f910 	bl	80015ac <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e04d      	b.n	8003436 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800339a:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <HAL_RCC_OscConfig+0x4ac>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f0      	bne.n	8003388 <HAL_RCC_OscConfig+0x480>
 80033a6:	e045      	b.n	8003434 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d107      	bne.n	80033c0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e040      	b.n	8003436 <HAL_RCC_OscConfig+0x52e>
 80033b4:	40023800 	.word	0x40023800
 80033b8:	40007000 	.word	0x40007000
 80033bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033c0:	4b1f      	ldr	r3, [pc, #124]	; (8003440 <HAL_RCC_OscConfig+0x538>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d030      	beq.n	8003430 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033d8:	429a      	cmp	r2, r3
 80033da:	d129      	bne.n	8003430 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d122      	bne.n	8003430 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033f0:	4013      	ands	r3, r2
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d119      	bne.n	8003430 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003406:	085b      	lsrs	r3, r3, #1
 8003408:	3b01      	subs	r3, #1
 800340a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800340c:	429a      	cmp	r2, r3
 800340e:	d10f      	bne.n	8003430 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800341c:	429a      	cmp	r2, r3
 800341e:	d107      	bne.n	8003430 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800342c:	429a      	cmp	r2, r3
 800342e:	d001      	beq.n	8003434 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e000      	b.n	8003436 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40023800 	.word	0x40023800

08003444 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e03f      	b.n	80034d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d106      	bne.n	8003470 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7fd fee4 	bl	8001238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2224      	movs	r2, #36	; 0x24
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003486:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f929 	bl	80036e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	691a      	ldr	r2, [r3, #16]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800349c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	695a      	ldr	r2, [r3, #20]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2220      	movs	r2, #32
 80034d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b08a      	sub	sp, #40	; 0x28
 80034e2:	af02      	add	r7, sp, #8
 80034e4:	60f8      	str	r0, [r7, #12]
 80034e6:	60b9      	str	r1, [r7, #8]
 80034e8:	603b      	str	r3, [r7, #0]
 80034ea:	4613      	mov	r3, r2
 80034ec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b20      	cmp	r3, #32
 80034fc:	d17c      	bne.n	80035f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d002      	beq.n	800350a <HAL_UART_Transmit+0x2c>
 8003504:	88fb      	ldrh	r3, [r7, #6]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e075      	b.n	80035fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <HAL_UART_Transmit+0x3e>
 8003518:	2302      	movs	r3, #2
 800351a:	e06e      	b.n	80035fa <HAL_UART_Transmit+0x11c>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2221      	movs	r2, #33	; 0x21
 800352e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003532:	f7fe f83b 	bl	80015ac <HAL_GetTick>
 8003536:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	88fa      	ldrh	r2, [r7, #6]
 800353c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	88fa      	ldrh	r2, [r7, #6]
 8003542:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800354c:	d108      	bne.n	8003560 <HAL_UART_Transmit+0x82>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d104      	bne.n	8003560 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003556:	2300      	movs	r3, #0
 8003558:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	61bb      	str	r3, [r7, #24]
 800355e:	e003      	b.n	8003568 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003564:	2300      	movs	r3, #0
 8003566:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003570:	e02a      	b.n	80035c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2200      	movs	r2, #0
 800357a:	2180      	movs	r1, #128	; 0x80
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 f840 	bl	8003602 <UART_WaitOnFlagUntilTimeout>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e036      	b.n	80035fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10b      	bne.n	80035aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	881b      	ldrh	r3, [r3, #0]
 8003596:	461a      	mov	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	3302      	adds	r3, #2
 80035a6:	61bb      	str	r3, [r7, #24]
 80035a8:	e007      	b.n	80035ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	781a      	ldrb	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	3301      	adds	r3, #1
 80035b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035be:	b29b      	uxth	r3, r3
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1cf      	bne.n	8003572 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	2200      	movs	r2, #0
 80035da:	2140      	movs	r1, #64	; 0x40
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f000 f810 	bl	8003602 <UART_WaitOnFlagUntilTimeout>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e006      	b.n	80035fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	e000      	b.n	80035fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80035f8:	2302      	movs	r3, #2
  }
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3720      	adds	r7, #32
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b090      	sub	sp, #64	; 0x40
 8003606:	af00      	add	r7, sp, #0
 8003608:	60f8      	str	r0, [r7, #12]
 800360a:	60b9      	str	r1, [r7, #8]
 800360c:	603b      	str	r3, [r7, #0]
 800360e:	4613      	mov	r3, r2
 8003610:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003612:	e050      	b.n	80036b6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003616:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800361a:	d04c      	beq.n	80036b6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800361c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800361e:	2b00      	cmp	r3, #0
 8003620:	d007      	beq.n	8003632 <UART_WaitOnFlagUntilTimeout+0x30>
 8003622:	f7fd ffc3 	bl	80015ac <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800362e:	429a      	cmp	r2, r3
 8003630:	d241      	bcs.n	80036b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	330c      	adds	r3, #12
 8003638:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363c:	e853 3f00 	ldrex	r3, [r3]
 8003640:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003648:	63fb      	str	r3, [r7, #60]	; 0x3c
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	330c      	adds	r3, #12
 8003650:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003652:	637a      	str	r2, [r7, #52]	; 0x34
 8003654:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003656:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003658:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800365a:	e841 2300 	strex	r3, r2, [r1]
 800365e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1e5      	bne.n	8003632 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	3314      	adds	r3, #20
 800366c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	e853 3f00 	ldrex	r3, [r3]
 8003674:	613b      	str	r3, [r7, #16]
   return(result);
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	f023 0301 	bic.w	r3, r3, #1
 800367c:	63bb      	str	r3, [r7, #56]	; 0x38
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	3314      	adds	r3, #20
 8003684:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003686:	623a      	str	r2, [r7, #32]
 8003688:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368a:	69f9      	ldr	r1, [r7, #28]
 800368c:	6a3a      	ldr	r2, [r7, #32]
 800368e:	e841 2300 	strex	r3, r2, [r1]
 8003692:	61bb      	str	r3, [r7, #24]
   return(result);
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1e5      	bne.n	8003666 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2220      	movs	r2, #32
 800369e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2220      	movs	r2, #32
 80036a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e00f      	b.n	80036d6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	4013      	ands	r3, r2
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	bf0c      	ite	eq
 80036c6:	2301      	moveq	r3, #1
 80036c8:	2300      	movne	r3, #0
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	461a      	mov	r2, r3
 80036ce:	79fb      	ldrb	r3, [r7, #7]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d09f      	beq.n	8003614 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3740      	adds	r7, #64	; 0x40
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
	...

080036e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036e4:	b0c0      	sub	sp, #256	; 0x100
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80036f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036fc:	68d9      	ldr	r1, [r3, #12]
 80036fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	ea40 0301 	orr.w	r3, r0, r1
 8003708:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800370a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	431a      	orrs	r2, r3
 8003718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	431a      	orrs	r2, r3
 8003720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	4313      	orrs	r3, r2
 8003728:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800372c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003738:	f021 010c 	bic.w	r1, r1, #12
 800373c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003746:	430b      	orrs	r3, r1
 8003748:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800374a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800375a:	6999      	ldr	r1, [r3, #24]
 800375c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	ea40 0301 	orr.w	r3, r0, r1
 8003766:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	4b8f      	ldr	r3, [pc, #572]	; (80039ac <UART_SetConfig+0x2cc>)
 8003770:	429a      	cmp	r2, r3
 8003772:	d005      	beq.n	8003780 <UART_SetConfig+0xa0>
 8003774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	4b8d      	ldr	r3, [pc, #564]	; (80039b0 <UART_SetConfig+0x2d0>)
 800377c:	429a      	cmp	r2, r3
 800377e:	d104      	bne.n	800378a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003780:	f7ff f97e 	bl	8002a80 <HAL_RCC_GetPCLK2Freq>
 8003784:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003788:	e003      	b.n	8003792 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800378a:	f7ff f965 	bl	8002a58 <HAL_RCC_GetPCLK1Freq>
 800378e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800379c:	f040 810c 	bne.w	80039b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037a4:	2200      	movs	r2, #0
 80037a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80037aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80037ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80037b2:	4622      	mov	r2, r4
 80037b4:	462b      	mov	r3, r5
 80037b6:	1891      	adds	r1, r2, r2
 80037b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80037ba:	415b      	adcs	r3, r3
 80037bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80037c2:	4621      	mov	r1, r4
 80037c4:	eb12 0801 	adds.w	r8, r2, r1
 80037c8:	4629      	mov	r1, r5
 80037ca:	eb43 0901 	adc.w	r9, r3, r1
 80037ce:	f04f 0200 	mov.w	r2, #0
 80037d2:	f04f 0300 	mov.w	r3, #0
 80037d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037e2:	4690      	mov	r8, r2
 80037e4:	4699      	mov	r9, r3
 80037e6:	4623      	mov	r3, r4
 80037e8:	eb18 0303 	adds.w	r3, r8, r3
 80037ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80037f0:	462b      	mov	r3, r5
 80037f2:	eb49 0303 	adc.w	r3, r9, r3
 80037f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80037fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003806:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800380a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800380e:	460b      	mov	r3, r1
 8003810:	18db      	adds	r3, r3, r3
 8003812:	653b      	str	r3, [r7, #80]	; 0x50
 8003814:	4613      	mov	r3, r2
 8003816:	eb42 0303 	adc.w	r3, r2, r3
 800381a:	657b      	str	r3, [r7, #84]	; 0x54
 800381c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003820:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003824:	f7fd f84a 	bl	80008bc <__aeabi_uldivmod>
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
 800382c:	4b61      	ldr	r3, [pc, #388]	; (80039b4 <UART_SetConfig+0x2d4>)
 800382e:	fba3 2302 	umull	r2, r3, r3, r2
 8003832:	095b      	lsrs	r3, r3, #5
 8003834:	011c      	lsls	r4, r3, #4
 8003836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800383a:	2200      	movs	r2, #0
 800383c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003840:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003844:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003848:	4642      	mov	r2, r8
 800384a:	464b      	mov	r3, r9
 800384c:	1891      	adds	r1, r2, r2
 800384e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003850:	415b      	adcs	r3, r3
 8003852:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003854:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003858:	4641      	mov	r1, r8
 800385a:	eb12 0a01 	adds.w	sl, r2, r1
 800385e:	4649      	mov	r1, r9
 8003860:	eb43 0b01 	adc.w	fp, r3, r1
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	f04f 0300 	mov.w	r3, #0
 800386c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003870:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003874:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003878:	4692      	mov	sl, r2
 800387a:	469b      	mov	fp, r3
 800387c:	4643      	mov	r3, r8
 800387e:	eb1a 0303 	adds.w	r3, sl, r3
 8003882:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003886:	464b      	mov	r3, r9
 8003888:	eb4b 0303 	adc.w	r3, fp, r3
 800388c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800389c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80038a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80038a4:	460b      	mov	r3, r1
 80038a6:	18db      	adds	r3, r3, r3
 80038a8:	643b      	str	r3, [r7, #64]	; 0x40
 80038aa:	4613      	mov	r3, r2
 80038ac:	eb42 0303 	adc.w	r3, r2, r3
 80038b0:	647b      	str	r3, [r7, #68]	; 0x44
 80038b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80038b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80038ba:	f7fc ffff 	bl	80008bc <__aeabi_uldivmod>
 80038be:	4602      	mov	r2, r0
 80038c0:	460b      	mov	r3, r1
 80038c2:	4611      	mov	r1, r2
 80038c4:	4b3b      	ldr	r3, [pc, #236]	; (80039b4 <UART_SetConfig+0x2d4>)
 80038c6:	fba3 2301 	umull	r2, r3, r3, r1
 80038ca:	095b      	lsrs	r3, r3, #5
 80038cc:	2264      	movs	r2, #100	; 0x64
 80038ce:	fb02 f303 	mul.w	r3, r2, r3
 80038d2:	1acb      	subs	r3, r1, r3
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80038da:	4b36      	ldr	r3, [pc, #216]	; (80039b4 <UART_SetConfig+0x2d4>)
 80038dc:	fba3 2302 	umull	r2, r3, r3, r2
 80038e0:	095b      	lsrs	r3, r3, #5
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038e8:	441c      	add	r4, r3
 80038ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038ee:	2200      	movs	r2, #0
 80038f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80038f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80038fc:	4642      	mov	r2, r8
 80038fe:	464b      	mov	r3, r9
 8003900:	1891      	adds	r1, r2, r2
 8003902:	63b9      	str	r1, [r7, #56]	; 0x38
 8003904:	415b      	adcs	r3, r3
 8003906:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003908:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800390c:	4641      	mov	r1, r8
 800390e:	1851      	adds	r1, r2, r1
 8003910:	6339      	str	r1, [r7, #48]	; 0x30
 8003912:	4649      	mov	r1, r9
 8003914:	414b      	adcs	r3, r1
 8003916:	637b      	str	r3, [r7, #52]	; 0x34
 8003918:	f04f 0200 	mov.w	r2, #0
 800391c:	f04f 0300 	mov.w	r3, #0
 8003920:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003924:	4659      	mov	r1, fp
 8003926:	00cb      	lsls	r3, r1, #3
 8003928:	4651      	mov	r1, sl
 800392a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800392e:	4651      	mov	r1, sl
 8003930:	00ca      	lsls	r2, r1, #3
 8003932:	4610      	mov	r0, r2
 8003934:	4619      	mov	r1, r3
 8003936:	4603      	mov	r3, r0
 8003938:	4642      	mov	r2, r8
 800393a:	189b      	adds	r3, r3, r2
 800393c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003940:	464b      	mov	r3, r9
 8003942:	460a      	mov	r2, r1
 8003944:	eb42 0303 	adc.w	r3, r2, r3
 8003948:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800394c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003958:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800395c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003960:	460b      	mov	r3, r1
 8003962:	18db      	adds	r3, r3, r3
 8003964:	62bb      	str	r3, [r7, #40]	; 0x28
 8003966:	4613      	mov	r3, r2
 8003968:	eb42 0303 	adc.w	r3, r2, r3
 800396c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800396e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003972:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003976:	f7fc ffa1 	bl	80008bc <__aeabi_uldivmod>
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	4b0d      	ldr	r3, [pc, #52]	; (80039b4 <UART_SetConfig+0x2d4>)
 8003980:	fba3 1302 	umull	r1, r3, r3, r2
 8003984:	095b      	lsrs	r3, r3, #5
 8003986:	2164      	movs	r1, #100	; 0x64
 8003988:	fb01 f303 	mul.w	r3, r1, r3
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	3332      	adds	r3, #50	; 0x32
 8003992:	4a08      	ldr	r2, [pc, #32]	; (80039b4 <UART_SetConfig+0x2d4>)
 8003994:	fba2 2303 	umull	r2, r3, r2, r3
 8003998:	095b      	lsrs	r3, r3, #5
 800399a:	f003 0207 	and.w	r2, r3, #7
 800399e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4422      	add	r2, r4
 80039a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039a8:	e106      	b.n	8003bb8 <UART_SetConfig+0x4d8>
 80039aa:	bf00      	nop
 80039ac:	40011000 	.word	0x40011000
 80039b0:	40011400 	.word	0x40011400
 80039b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039bc:	2200      	movs	r2, #0
 80039be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80039c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80039c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80039ca:	4642      	mov	r2, r8
 80039cc:	464b      	mov	r3, r9
 80039ce:	1891      	adds	r1, r2, r2
 80039d0:	6239      	str	r1, [r7, #32]
 80039d2:	415b      	adcs	r3, r3
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24
 80039d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039da:	4641      	mov	r1, r8
 80039dc:	1854      	adds	r4, r2, r1
 80039de:	4649      	mov	r1, r9
 80039e0:	eb43 0501 	adc.w	r5, r3, r1
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	f04f 0300 	mov.w	r3, #0
 80039ec:	00eb      	lsls	r3, r5, #3
 80039ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039f2:	00e2      	lsls	r2, r4, #3
 80039f4:	4614      	mov	r4, r2
 80039f6:	461d      	mov	r5, r3
 80039f8:	4643      	mov	r3, r8
 80039fa:	18e3      	adds	r3, r4, r3
 80039fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a00:	464b      	mov	r3, r9
 8003a02:	eb45 0303 	adc.w	r3, r5, r3
 8003a06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a1a:	f04f 0200 	mov.w	r2, #0
 8003a1e:	f04f 0300 	mov.w	r3, #0
 8003a22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a26:	4629      	mov	r1, r5
 8003a28:	008b      	lsls	r3, r1, #2
 8003a2a:	4621      	mov	r1, r4
 8003a2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a30:	4621      	mov	r1, r4
 8003a32:	008a      	lsls	r2, r1, #2
 8003a34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003a38:	f7fc ff40 	bl	80008bc <__aeabi_uldivmod>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4b60      	ldr	r3, [pc, #384]	; (8003bc4 <UART_SetConfig+0x4e4>)
 8003a42:	fba3 2302 	umull	r2, r3, r3, r2
 8003a46:	095b      	lsrs	r3, r3, #5
 8003a48:	011c      	lsls	r4, r3, #4
 8003a4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a5c:	4642      	mov	r2, r8
 8003a5e:	464b      	mov	r3, r9
 8003a60:	1891      	adds	r1, r2, r2
 8003a62:	61b9      	str	r1, [r7, #24]
 8003a64:	415b      	adcs	r3, r3
 8003a66:	61fb      	str	r3, [r7, #28]
 8003a68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a6c:	4641      	mov	r1, r8
 8003a6e:	1851      	adds	r1, r2, r1
 8003a70:	6139      	str	r1, [r7, #16]
 8003a72:	4649      	mov	r1, r9
 8003a74:	414b      	adcs	r3, r1
 8003a76:	617b      	str	r3, [r7, #20]
 8003a78:	f04f 0200 	mov.w	r2, #0
 8003a7c:	f04f 0300 	mov.w	r3, #0
 8003a80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a84:	4659      	mov	r1, fp
 8003a86:	00cb      	lsls	r3, r1, #3
 8003a88:	4651      	mov	r1, sl
 8003a8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a8e:	4651      	mov	r1, sl
 8003a90:	00ca      	lsls	r2, r1, #3
 8003a92:	4610      	mov	r0, r2
 8003a94:	4619      	mov	r1, r3
 8003a96:	4603      	mov	r3, r0
 8003a98:	4642      	mov	r2, r8
 8003a9a:	189b      	adds	r3, r3, r2
 8003a9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003aa0:	464b      	mov	r3, r9
 8003aa2:	460a      	mov	r2, r1
 8003aa4:	eb42 0303 	adc.w	r3, r2, r3
 8003aa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ab6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ab8:	f04f 0200 	mov.w	r2, #0
 8003abc:	f04f 0300 	mov.w	r3, #0
 8003ac0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ac4:	4649      	mov	r1, r9
 8003ac6:	008b      	lsls	r3, r1, #2
 8003ac8:	4641      	mov	r1, r8
 8003aca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ace:	4641      	mov	r1, r8
 8003ad0:	008a      	lsls	r2, r1, #2
 8003ad2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003ad6:	f7fc fef1 	bl	80008bc <__aeabi_uldivmod>
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	4611      	mov	r1, r2
 8003ae0:	4b38      	ldr	r3, [pc, #224]	; (8003bc4 <UART_SetConfig+0x4e4>)
 8003ae2:	fba3 2301 	umull	r2, r3, r3, r1
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	2264      	movs	r2, #100	; 0x64
 8003aea:	fb02 f303 	mul.w	r3, r2, r3
 8003aee:	1acb      	subs	r3, r1, r3
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	3332      	adds	r3, #50	; 0x32
 8003af4:	4a33      	ldr	r2, [pc, #204]	; (8003bc4 <UART_SetConfig+0x4e4>)
 8003af6:	fba2 2303 	umull	r2, r3, r2, r3
 8003afa:	095b      	lsrs	r3, r3, #5
 8003afc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b00:	441c      	add	r4, r3
 8003b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b06:	2200      	movs	r2, #0
 8003b08:	673b      	str	r3, [r7, #112]	; 0x70
 8003b0a:	677a      	str	r2, [r7, #116]	; 0x74
 8003b0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003b10:	4642      	mov	r2, r8
 8003b12:	464b      	mov	r3, r9
 8003b14:	1891      	adds	r1, r2, r2
 8003b16:	60b9      	str	r1, [r7, #8]
 8003b18:	415b      	adcs	r3, r3
 8003b1a:	60fb      	str	r3, [r7, #12]
 8003b1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b20:	4641      	mov	r1, r8
 8003b22:	1851      	adds	r1, r2, r1
 8003b24:	6039      	str	r1, [r7, #0]
 8003b26:	4649      	mov	r1, r9
 8003b28:	414b      	adcs	r3, r1
 8003b2a:	607b      	str	r3, [r7, #4]
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	f04f 0300 	mov.w	r3, #0
 8003b34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b38:	4659      	mov	r1, fp
 8003b3a:	00cb      	lsls	r3, r1, #3
 8003b3c:	4651      	mov	r1, sl
 8003b3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b42:	4651      	mov	r1, sl
 8003b44:	00ca      	lsls	r2, r1, #3
 8003b46:	4610      	mov	r0, r2
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	4642      	mov	r2, r8
 8003b4e:	189b      	adds	r3, r3, r2
 8003b50:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b52:	464b      	mov	r3, r9
 8003b54:	460a      	mov	r2, r1
 8003b56:	eb42 0303 	adc.w	r3, r2, r3
 8003b5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	663b      	str	r3, [r7, #96]	; 0x60
 8003b66:	667a      	str	r2, [r7, #100]	; 0x64
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	f04f 0300 	mov.w	r3, #0
 8003b70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b74:	4649      	mov	r1, r9
 8003b76:	008b      	lsls	r3, r1, #2
 8003b78:	4641      	mov	r1, r8
 8003b7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b7e:	4641      	mov	r1, r8
 8003b80:	008a      	lsls	r2, r1, #2
 8003b82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b86:	f7fc fe99 	bl	80008bc <__aeabi_uldivmod>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	4b0d      	ldr	r3, [pc, #52]	; (8003bc4 <UART_SetConfig+0x4e4>)
 8003b90:	fba3 1302 	umull	r1, r3, r3, r2
 8003b94:	095b      	lsrs	r3, r3, #5
 8003b96:	2164      	movs	r1, #100	; 0x64
 8003b98:	fb01 f303 	mul.w	r3, r1, r3
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	3332      	adds	r3, #50	; 0x32
 8003ba2:	4a08      	ldr	r2, [pc, #32]	; (8003bc4 <UART_SetConfig+0x4e4>)
 8003ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba8:	095b      	lsrs	r3, r3, #5
 8003baa:	f003 020f 	and.w	r2, r3, #15
 8003bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4422      	add	r2, r4
 8003bb6:	609a      	str	r2, [r3, #8]
}
 8003bb8:	bf00      	nop
 8003bba:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bc4:	51eb851f 	.word	0x51eb851f

08003bc8 <std>:
 8003bc8:	2300      	movs	r3, #0
 8003bca:	b510      	push	{r4, lr}
 8003bcc:	4604      	mov	r4, r0
 8003bce:	e9c0 3300 	strd	r3, r3, [r0]
 8003bd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003bd6:	6083      	str	r3, [r0, #8]
 8003bd8:	8181      	strh	r1, [r0, #12]
 8003bda:	6643      	str	r3, [r0, #100]	; 0x64
 8003bdc:	81c2      	strh	r2, [r0, #14]
 8003bde:	6183      	str	r3, [r0, #24]
 8003be0:	4619      	mov	r1, r3
 8003be2:	2208      	movs	r2, #8
 8003be4:	305c      	adds	r0, #92	; 0x5c
 8003be6:	f000 fa9b 	bl	8004120 <memset>
 8003bea:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <std+0x38>)
 8003bec:	6263      	str	r3, [r4, #36]	; 0x24
 8003bee:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <std+0x3c>)
 8003bf0:	62a3      	str	r3, [r4, #40]	; 0x28
 8003bf2:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <std+0x40>)
 8003bf4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003bf6:	4b05      	ldr	r3, [pc, #20]	; (8003c0c <std+0x44>)
 8003bf8:	6224      	str	r4, [r4, #32]
 8003bfa:	6323      	str	r3, [r4, #48]	; 0x30
 8003bfc:	bd10      	pop	{r4, pc}
 8003bfe:	bf00      	nop
 8003c00:	08003f71 	.word	0x08003f71
 8003c04:	08003f93 	.word	0x08003f93
 8003c08:	08003fcb 	.word	0x08003fcb
 8003c0c:	08003fef 	.word	0x08003fef

08003c10 <stdio_exit_handler>:
 8003c10:	4a02      	ldr	r2, [pc, #8]	; (8003c1c <stdio_exit_handler+0xc>)
 8003c12:	4903      	ldr	r1, [pc, #12]	; (8003c20 <stdio_exit_handler+0x10>)
 8003c14:	4803      	ldr	r0, [pc, #12]	; (8003c24 <stdio_exit_handler+0x14>)
 8003c16:	f000 b869 	b.w	8003cec <_fwalk_sglue>
 8003c1a:	bf00      	nop
 8003c1c:	2000000c 	.word	0x2000000c
 8003c20:	08004ac9 	.word	0x08004ac9
 8003c24:	20000018 	.word	0x20000018

08003c28 <cleanup_stdio>:
 8003c28:	6841      	ldr	r1, [r0, #4]
 8003c2a:	4b0c      	ldr	r3, [pc, #48]	; (8003c5c <cleanup_stdio+0x34>)
 8003c2c:	4299      	cmp	r1, r3
 8003c2e:	b510      	push	{r4, lr}
 8003c30:	4604      	mov	r4, r0
 8003c32:	d001      	beq.n	8003c38 <cleanup_stdio+0x10>
 8003c34:	f000 ff48 	bl	8004ac8 <_fflush_r>
 8003c38:	68a1      	ldr	r1, [r4, #8]
 8003c3a:	4b09      	ldr	r3, [pc, #36]	; (8003c60 <cleanup_stdio+0x38>)
 8003c3c:	4299      	cmp	r1, r3
 8003c3e:	d002      	beq.n	8003c46 <cleanup_stdio+0x1e>
 8003c40:	4620      	mov	r0, r4
 8003c42:	f000 ff41 	bl	8004ac8 <_fflush_r>
 8003c46:	68e1      	ldr	r1, [r4, #12]
 8003c48:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <cleanup_stdio+0x3c>)
 8003c4a:	4299      	cmp	r1, r3
 8003c4c:	d004      	beq.n	8003c58 <cleanup_stdio+0x30>
 8003c4e:	4620      	mov	r0, r4
 8003c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c54:	f000 bf38 	b.w	8004ac8 <_fflush_r>
 8003c58:	bd10      	pop	{r4, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20000140 	.word	0x20000140
 8003c60:	200001a8 	.word	0x200001a8
 8003c64:	20000210 	.word	0x20000210

08003c68 <global_stdio_init.part.0>:
 8003c68:	b510      	push	{r4, lr}
 8003c6a:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <global_stdio_init.part.0+0x30>)
 8003c6c:	4c0b      	ldr	r4, [pc, #44]	; (8003c9c <global_stdio_init.part.0+0x34>)
 8003c6e:	4a0c      	ldr	r2, [pc, #48]	; (8003ca0 <global_stdio_init.part.0+0x38>)
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	4620      	mov	r0, r4
 8003c74:	2200      	movs	r2, #0
 8003c76:	2104      	movs	r1, #4
 8003c78:	f7ff ffa6 	bl	8003bc8 <std>
 8003c7c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003c80:	2201      	movs	r2, #1
 8003c82:	2109      	movs	r1, #9
 8003c84:	f7ff ffa0 	bl	8003bc8 <std>
 8003c88:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c92:	2112      	movs	r1, #18
 8003c94:	f7ff bf98 	b.w	8003bc8 <std>
 8003c98:	20000278 	.word	0x20000278
 8003c9c:	20000140 	.word	0x20000140
 8003ca0:	08003c11 	.word	0x08003c11

08003ca4 <__sfp_lock_acquire>:
 8003ca4:	4801      	ldr	r0, [pc, #4]	; (8003cac <__sfp_lock_acquire+0x8>)
 8003ca6:	f000 bab3 	b.w	8004210 <__retarget_lock_acquire_recursive>
 8003caa:	bf00      	nop
 8003cac:	20000281 	.word	0x20000281

08003cb0 <__sfp_lock_release>:
 8003cb0:	4801      	ldr	r0, [pc, #4]	; (8003cb8 <__sfp_lock_release+0x8>)
 8003cb2:	f000 baae 	b.w	8004212 <__retarget_lock_release_recursive>
 8003cb6:	bf00      	nop
 8003cb8:	20000281 	.word	0x20000281

08003cbc <__sinit>:
 8003cbc:	b510      	push	{r4, lr}
 8003cbe:	4604      	mov	r4, r0
 8003cc0:	f7ff fff0 	bl	8003ca4 <__sfp_lock_acquire>
 8003cc4:	6a23      	ldr	r3, [r4, #32]
 8003cc6:	b11b      	cbz	r3, 8003cd0 <__sinit+0x14>
 8003cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ccc:	f7ff bff0 	b.w	8003cb0 <__sfp_lock_release>
 8003cd0:	4b04      	ldr	r3, [pc, #16]	; (8003ce4 <__sinit+0x28>)
 8003cd2:	6223      	str	r3, [r4, #32]
 8003cd4:	4b04      	ldr	r3, [pc, #16]	; (8003ce8 <__sinit+0x2c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1f5      	bne.n	8003cc8 <__sinit+0xc>
 8003cdc:	f7ff ffc4 	bl	8003c68 <global_stdio_init.part.0>
 8003ce0:	e7f2      	b.n	8003cc8 <__sinit+0xc>
 8003ce2:	bf00      	nop
 8003ce4:	08003c29 	.word	0x08003c29
 8003ce8:	20000278 	.word	0x20000278

08003cec <_fwalk_sglue>:
 8003cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cf0:	4607      	mov	r7, r0
 8003cf2:	4688      	mov	r8, r1
 8003cf4:	4614      	mov	r4, r2
 8003cf6:	2600      	movs	r6, #0
 8003cf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003cfc:	f1b9 0901 	subs.w	r9, r9, #1
 8003d00:	d505      	bpl.n	8003d0e <_fwalk_sglue+0x22>
 8003d02:	6824      	ldr	r4, [r4, #0]
 8003d04:	2c00      	cmp	r4, #0
 8003d06:	d1f7      	bne.n	8003cf8 <_fwalk_sglue+0xc>
 8003d08:	4630      	mov	r0, r6
 8003d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d0e:	89ab      	ldrh	r3, [r5, #12]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d907      	bls.n	8003d24 <_fwalk_sglue+0x38>
 8003d14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	d003      	beq.n	8003d24 <_fwalk_sglue+0x38>
 8003d1c:	4629      	mov	r1, r5
 8003d1e:	4638      	mov	r0, r7
 8003d20:	47c0      	blx	r8
 8003d22:	4306      	orrs	r6, r0
 8003d24:	3568      	adds	r5, #104	; 0x68
 8003d26:	e7e9      	b.n	8003cfc <_fwalk_sglue+0x10>

08003d28 <iprintf>:
 8003d28:	b40f      	push	{r0, r1, r2, r3}
 8003d2a:	b507      	push	{r0, r1, r2, lr}
 8003d2c:	4906      	ldr	r1, [pc, #24]	; (8003d48 <iprintf+0x20>)
 8003d2e:	ab04      	add	r3, sp, #16
 8003d30:	6808      	ldr	r0, [r1, #0]
 8003d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d36:	6881      	ldr	r1, [r0, #8]
 8003d38:	9301      	str	r3, [sp, #4]
 8003d3a:	f000 fb95 	bl	8004468 <_vfiprintf_r>
 8003d3e:	b003      	add	sp, #12
 8003d40:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d44:	b004      	add	sp, #16
 8003d46:	4770      	bx	lr
 8003d48:	20000064 	.word	0x20000064

08003d4c <_puts_r>:
 8003d4c:	6a03      	ldr	r3, [r0, #32]
 8003d4e:	b570      	push	{r4, r5, r6, lr}
 8003d50:	6884      	ldr	r4, [r0, #8]
 8003d52:	4605      	mov	r5, r0
 8003d54:	460e      	mov	r6, r1
 8003d56:	b90b      	cbnz	r3, 8003d5c <_puts_r+0x10>
 8003d58:	f7ff ffb0 	bl	8003cbc <__sinit>
 8003d5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d5e:	07db      	lsls	r3, r3, #31
 8003d60:	d405      	bmi.n	8003d6e <_puts_r+0x22>
 8003d62:	89a3      	ldrh	r3, [r4, #12]
 8003d64:	0598      	lsls	r0, r3, #22
 8003d66:	d402      	bmi.n	8003d6e <_puts_r+0x22>
 8003d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d6a:	f000 fa51 	bl	8004210 <__retarget_lock_acquire_recursive>
 8003d6e:	89a3      	ldrh	r3, [r4, #12]
 8003d70:	0719      	lsls	r1, r3, #28
 8003d72:	d513      	bpl.n	8003d9c <_puts_r+0x50>
 8003d74:	6923      	ldr	r3, [r4, #16]
 8003d76:	b18b      	cbz	r3, 8003d9c <_puts_r+0x50>
 8003d78:	3e01      	subs	r6, #1
 8003d7a:	68a3      	ldr	r3, [r4, #8]
 8003d7c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d80:	3b01      	subs	r3, #1
 8003d82:	60a3      	str	r3, [r4, #8]
 8003d84:	b9e9      	cbnz	r1, 8003dc2 <_puts_r+0x76>
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	da2e      	bge.n	8003de8 <_puts_r+0x9c>
 8003d8a:	4622      	mov	r2, r4
 8003d8c:	210a      	movs	r1, #10
 8003d8e:	4628      	mov	r0, r5
 8003d90:	f000 f931 	bl	8003ff6 <__swbuf_r>
 8003d94:	3001      	adds	r0, #1
 8003d96:	d007      	beq.n	8003da8 <_puts_r+0x5c>
 8003d98:	250a      	movs	r5, #10
 8003d9a:	e007      	b.n	8003dac <_puts_r+0x60>
 8003d9c:	4621      	mov	r1, r4
 8003d9e:	4628      	mov	r0, r5
 8003da0:	f000 f966 	bl	8004070 <__swsetup_r>
 8003da4:	2800      	cmp	r0, #0
 8003da6:	d0e7      	beq.n	8003d78 <_puts_r+0x2c>
 8003da8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003dac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003dae:	07da      	lsls	r2, r3, #31
 8003db0:	d405      	bmi.n	8003dbe <_puts_r+0x72>
 8003db2:	89a3      	ldrh	r3, [r4, #12]
 8003db4:	059b      	lsls	r3, r3, #22
 8003db6:	d402      	bmi.n	8003dbe <_puts_r+0x72>
 8003db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dba:	f000 fa2a 	bl	8004212 <__retarget_lock_release_recursive>
 8003dbe:	4628      	mov	r0, r5
 8003dc0:	bd70      	pop	{r4, r5, r6, pc}
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	da04      	bge.n	8003dd0 <_puts_r+0x84>
 8003dc6:	69a2      	ldr	r2, [r4, #24]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	dc06      	bgt.n	8003dda <_puts_r+0x8e>
 8003dcc:	290a      	cmp	r1, #10
 8003dce:	d004      	beq.n	8003dda <_puts_r+0x8e>
 8003dd0:	6823      	ldr	r3, [r4, #0]
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	6022      	str	r2, [r4, #0]
 8003dd6:	7019      	strb	r1, [r3, #0]
 8003dd8:	e7cf      	b.n	8003d7a <_puts_r+0x2e>
 8003dda:	4622      	mov	r2, r4
 8003ddc:	4628      	mov	r0, r5
 8003dde:	f000 f90a 	bl	8003ff6 <__swbuf_r>
 8003de2:	3001      	adds	r0, #1
 8003de4:	d1c9      	bne.n	8003d7a <_puts_r+0x2e>
 8003de6:	e7df      	b.n	8003da8 <_puts_r+0x5c>
 8003de8:	6823      	ldr	r3, [r4, #0]
 8003dea:	250a      	movs	r5, #10
 8003dec:	1c5a      	adds	r2, r3, #1
 8003dee:	6022      	str	r2, [r4, #0]
 8003df0:	701d      	strb	r5, [r3, #0]
 8003df2:	e7db      	b.n	8003dac <_puts_r+0x60>

08003df4 <puts>:
 8003df4:	4b02      	ldr	r3, [pc, #8]	; (8003e00 <puts+0xc>)
 8003df6:	4601      	mov	r1, r0
 8003df8:	6818      	ldr	r0, [r3, #0]
 8003dfa:	f7ff bfa7 	b.w	8003d4c <_puts_r>
 8003dfe:	bf00      	nop
 8003e00:	20000064 	.word	0x20000064

08003e04 <setbuf>:
 8003e04:	fab1 f281 	clz	r2, r1
 8003e08:	0952      	lsrs	r2, r2, #5
 8003e0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e0e:	0052      	lsls	r2, r2, #1
 8003e10:	f000 b800 	b.w	8003e14 <setvbuf>

08003e14 <setvbuf>:
 8003e14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003e18:	461d      	mov	r5, r3
 8003e1a:	4b54      	ldr	r3, [pc, #336]	; (8003f6c <setvbuf+0x158>)
 8003e1c:	681f      	ldr	r7, [r3, #0]
 8003e1e:	4604      	mov	r4, r0
 8003e20:	460e      	mov	r6, r1
 8003e22:	4690      	mov	r8, r2
 8003e24:	b127      	cbz	r7, 8003e30 <setvbuf+0x1c>
 8003e26:	6a3b      	ldr	r3, [r7, #32]
 8003e28:	b913      	cbnz	r3, 8003e30 <setvbuf+0x1c>
 8003e2a:	4638      	mov	r0, r7
 8003e2c:	f7ff ff46 	bl	8003cbc <__sinit>
 8003e30:	f1b8 0f02 	cmp.w	r8, #2
 8003e34:	d006      	beq.n	8003e44 <setvbuf+0x30>
 8003e36:	f1b8 0f01 	cmp.w	r8, #1
 8003e3a:	f200 8094 	bhi.w	8003f66 <setvbuf+0x152>
 8003e3e:	2d00      	cmp	r5, #0
 8003e40:	f2c0 8091 	blt.w	8003f66 <setvbuf+0x152>
 8003e44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e46:	07da      	lsls	r2, r3, #31
 8003e48:	d405      	bmi.n	8003e56 <setvbuf+0x42>
 8003e4a:	89a3      	ldrh	r3, [r4, #12]
 8003e4c:	059b      	lsls	r3, r3, #22
 8003e4e:	d402      	bmi.n	8003e56 <setvbuf+0x42>
 8003e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e52:	f000 f9dd 	bl	8004210 <__retarget_lock_acquire_recursive>
 8003e56:	4621      	mov	r1, r4
 8003e58:	4638      	mov	r0, r7
 8003e5a:	f000 fe35 	bl	8004ac8 <_fflush_r>
 8003e5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e60:	b141      	cbz	r1, 8003e74 <setvbuf+0x60>
 8003e62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e66:	4299      	cmp	r1, r3
 8003e68:	d002      	beq.n	8003e70 <setvbuf+0x5c>
 8003e6a:	4638      	mov	r0, r7
 8003e6c:	f000 f9d2 	bl	8004214 <_free_r>
 8003e70:	2300      	movs	r3, #0
 8003e72:	6363      	str	r3, [r4, #52]	; 0x34
 8003e74:	2300      	movs	r3, #0
 8003e76:	61a3      	str	r3, [r4, #24]
 8003e78:	6063      	str	r3, [r4, #4]
 8003e7a:	89a3      	ldrh	r3, [r4, #12]
 8003e7c:	0618      	lsls	r0, r3, #24
 8003e7e:	d503      	bpl.n	8003e88 <setvbuf+0x74>
 8003e80:	6921      	ldr	r1, [r4, #16]
 8003e82:	4638      	mov	r0, r7
 8003e84:	f000 f9c6 	bl	8004214 <_free_r>
 8003e88:	89a3      	ldrh	r3, [r4, #12]
 8003e8a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003e8e:	f023 0303 	bic.w	r3, r3, #3
 8003e92:	f1b8 0f02 	cmp.w	r8, #2
 8003e96:	81a3      	strh	r3, [r4, #12]
 8003e98:	d05f      	beq.n	8003f5a <setvbuf+0x146>
 8003e9a:	ab01      	add	r3, sp, #4
 8003e9c:	466a      	mov	r2, sp
 8003e9e:	4621      	mov	r1, r4
 8003ea0:	4638      	mov	r0, r7
 8003ea2:	f000 fe39 	bl	8004b18 <__swhatbuf_r>
 8003ea6:	89a3      	ldrh	r3, [r4, #12]
 8003ea8:	4318      	orrs	r0, r3
 8003eaa:	81a0      	strh	r0, [r4, #12]
 8003eac:	bb2d      	cbnz	r5, 8003efa <setvbuf+0xe6>
 8003eae:	9d00      	ldr	r5, [sp, #0]
 8003eb0:	4628      	mov	r0, r5
 8003eb2:	f000 f9fb 	bl	80042ac <malloc>
 8003eb6:	4606      	mov	r6, r0
 8003eb8:	2800      	cmp	r0, #0
 8003eba:	d150      	bne.n	8003f5e <setvbuf+0x14a>
 8003ebc:	f8dd 9000 	ldr.w	r9, [sp]
 8003ec0:	45a9      	cmp	r9, r5
 8003ec2:	d13e      	bne.n	8003f42 <setvbuf+0x12e>
 8003ec4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003ec8:	2200      	movs	r2, #0
 8003eca:	60a2      	str	r2, [r4, #8]
 8003ecc:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003ed0:	6022      	str	r2, [r4, #0]
 8003ed2:	6122      	str	r2, [r4, #16]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003eda:	6162      	str	r2, [r4, #20]
 8003edc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003ede:	f043 0302 	orr.w	r3, r3, #2
 8003ee2:	07d1      	lsls	r1, r2, #31
 8003ee4:	81a3      	strh	r3, [r4, #12]
 8003ee6:	d404      	bmi.n	8003ef2 <setvbuf+0xde>
 8003ee8:	059b      	lsls	r3, r3, #22
 8003eea:	d402      	bmi.n	8003ef2 <setvbuf+0xde>
 8003eec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003eee:	f000 f990 	bl	8004212 <__retarget_lock_release_recursive>
 8003ef2:	4628      	mov	r0, r5
 8003ef4:	b003      	add	sp, #12
 8003ef6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003efa:	2e00      	cmp	r6, #0
 8003efc:	d0d8      	beq.n	8003eb0 <setvbuf+0x9c>
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	b913      	cbnz	r3, 8003f08 <setvbuf+0xf4>
 8003f02:	4638      	mov	r0, r7
 8003f04:	f7ff feda 	bl	8003cbc <__sinit>
 8003f08:	f1b8 0f01 	cmp.w	r8, #1
 8003f0c:	bf08      	it	eq
 8003f0e:	89a3      	ldrheq	r3, [r4, #12]
 8003f10:	6026      	str	r6, [r4, #0]
 8003f12:	bf04      	itt	eq
 8003f14:	f043 0301 	orreq.w	r3, r3, #1
 8003f18:	81a3      	strheq	r3, [r4, #12]
 8003f1a:	89a3      	ldrh	r3, [r4, #12]
 8003f1c:	f013 0208 	ands.w	r2, r3, #8
 8003f20:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003f24:	d01d      	beq.n	8003f62 <setvbuf+0x14e>
 8003f26:	07da      	lsls	r2, r3, #31
 8003f28:	bf41      	itttt	mi
 8003f2a:	2200      	movmi	r2, #0
 8003f2c:	426d      	negmi	r5, r5
 8003f2e:	60a2      	strmi	r2, [r4, #8]
 8003f30:	61a5      	strmi	r5, [r4, #24]
 8003f32:	bf58      	it	pl
 8003f34:	60a5      	strpl	r5, [r4, #8]
 8003f36:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003f38:	f015 0501 	ands.w	r5, r5, #1
 8003f3c:	d0d4      	beq.n	8003ee8 <setvbuf+0xd4>
 8003f3e:	2500      	movs	r5, #0
 8003f40:	e7d7      	b.n	8003ef2 <setvbuf+0xde>
 8003f42:	4648      	mov	r0, r9
 8003f44:	f000 f9b2 	bl	80042ac <malloc>
 8003f48:	4606      	mov	r6, r0
 8003f4a:	2800      	cmp	r0, #0
 8003f4c:	d0ba      	beq.n	8003ec4 <setvbuf+0xb0>
 8003f4e:	89a3      	ldrh	r3, [r4, #12]
 8003f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f54:	81a3      	strh	r3, [r4, #12]
 8003f56:	464d      	mov	r5, r9
 8003f58:	e7d1      	b.n	8003efe <setvbuf+0xea>
 8003f5a:	2500      	movs	r5, #0
 8003f5c:	e7b4      	b.n	8003ec8 <setvbuf+0xb4>
 8003f5e:	46a9      	mov	r9, r5
 8003f60:	e7f5      	b.n	8003f4e <setvbuf+0x13a>
 8003f62:	60a2      	str	r2, [r4, #8]
 8003f64:	e7e7      	b.n	8003f36 <setvbuf+0x122>
 8003f66:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003f6a:	e7c2      	b.n	8003ef2 <setvbuf+0xde>
 8003f6c:	20000064 	.word	0x20000064

08003f70 <__sread>:
 8003f70:	b510      	push	{r4, lr}
 8003f72:	460c      	mov	r4, r1
 8003f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f78:	f000 f8fc 	bl	8004174 <_read_r>
 8003f7c:	2800      	cmp	r0, #0
 8003f7e:	bfab      	itete	ge
 8003f80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f82:	89a3      	ldrhlt	r3, [r4, #12]
 8003f84:	181b      	addge	r3, r3, r0
 8003f86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f8a:	bfac      	ite	ge
 8003f8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f8e:	81a3      	strhlt	r3, [r4, #12]
 8003f90:	bd10      	pop	{r4, pc}

08003f92 <__swrite>:
 8003f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f96:	461f      	mov	r7, r3
 8003f98:	898b      	ldrh	r3, [r1, #12]
 8003f9a:	05db      	lsls	r3, r3, #23
 8003f9c:	4605      	mov	r5, r0
 8003f9e:	460c      	mov	r4, r1
 8003fa0:	4616      	mov	r6, r2
 8003fa2:	d505      	bpl.n	8003fb0 <__swrite+0x1e>
 8003fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fa8:	2302      	movs	r3, #2
 8003faa:	2200      	movs	r2, #0
 8003fac:	f000 f8d0 	bl	8004150 <_lseek_r>
 8003fb0:	89a3      	ldrh	r3, [r4, #12]
 8003fb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fba:	81a3      	strh	r3, [r4, #12]
 8003fbc:	4632      	mov	r2, r6
 8003fbe:	463b      	mov	r3, r7
 8003fc0:	4628      	mov	r0, r5
 8003fc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fc6:	f000 b8e7 	b.w	8004198 <_write_r>

08003fca <__sseek>:
 8003fca:	b510      	push	{r4, lr}
 8003fcc:	460c      	mov	r4, r1
 8003fce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fd2:	f000 f8bd 	bl	8004150 <_lseek_r>
 8003fd6:	1c43      	adds	r3, r0, #1
 8003fd8:	89a3      	ldrh	r3, [r4, #12]
 8003fda:	bf15      	itete	ne
 8003fdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8003fde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003fe2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003fe6:	81a3      	strheq	r3, [r4, #12]
 8003fe8:	bf18      	it	ne
 8003fea:	81a3      	strhne	r3, [r4, #12]
 8003fec:	bd10      	pop	{r4, pc}

08003fee <__sclose>:
 8003fee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ff2:	f000 b89d 	b.w	8004130 <_close_r>

08003ff6 <__swbuf_r>:
 8003ff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ff8:	460e      	mov	r6, r1
 8003ffa:	4614      	mov	r4, r2
 8003ffc:	4605      	mov	r5, r0
 8003ffe:	b118      	cbz	r0, 8004008 <__swbuf_r+0x12>
 8004000:	6a03      	ldr	r3, [r0, #32]
 8004002:	b90b      	cbnz	r3, 8004008 <__swbuf_r+0x12>
 8004004:	f7ff fe5a 	bl	8003cbc <__sinit>
 8004008:	69a3      	ldr	r3, [r4, #24]
 800400a:	60a3      	str	r3, [r4, #8]
 800400c:	89a3      	ldrh	r3, [r4, #12]
 800400e:	071a      	lsls	r2, r3, #28
 8004010:	d525      	bpl.n	800405e <__swbuf_r+0x68>
 8004012:	6923      	ldr	r3, [r4, #16]
 8004014:	b31b      	cbz	r3, 800405e <__swbuf_r+0x68>
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	6922      	ldr	r2, [r4, #16]
 800401a:	1a98      	subs	r0, r3, r2
 800401c:	6963      	ldr	r3, [r4, #20]
 800401e:	b2f6      	uxtb	r6, r6
 8004020:	4283      	cmp	r3, r0
 8004022:	4637      	mov	r7, r6
 8004024:	dc04      	bgt.n	8004030 <__swbuf_r+0x3a>
 8004026:	4621      	mov	r1, r4
 8004028:	4628      	mov	r0, r5
 800402a:	f000 fd4d 	bl	8004ac8 <_fflush_r>
 800402e:	b9e0      	cbnz	r0, 800406a <__swbuf_r+0x74>
 8004030:	68a3      	ldr	r3, [r4, #8]
 8004032:	3b01      	subs	r3, #1
 8004034:	60a3      	str	r3, [r4, #8]
 8004036:	6823      	ldr	r3, [r4, #0]
 8004038:	1c5a      	adds	r2, r3, #1
 800403a:	6022      	str	r2, [r4, #0]
 800403c:	701e      	strb	r6, [r3, #0]
 800403e:	6962      	ldr	r2, [r4, #20]
 8004040:	1c43      	adds	r3, r0, #1
 8004042:	429a      	cmp	r2, r3
 8004044:	d004      	beq.n	8004050 <__swbuf_r+0x5a>
 8004046:	89a3      	ldrh	r3, [r4, #12]
 8004048:	07db      	lsls	r3, r3, #31
 800404a:	d506      	bpl.n	800405a <__swbuf_r+0x64>
 800404c:	2e0a      	cmp	r6, #10
 800404e:	d104      	bne.n	800405a <__swbuf_r+0x64>
 8004050:	4621      	mov	r1, r4
 8004052:	4628      	mov	r0, r5
 8004054:	f000 fd38 	bl	8004ac8 <_fflush_r>
 8004058:	b938      	cbnz	r0, 800406a <__swbuf_r+0x74>
 800405a:	4638      	mov	r0, r7
 800405c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800405e:	4621      	mov	r1, r4
 8004060:	4628      	mov	r0, r5
 8004062:	f000 f805 	bl	8004070 <__swsetup_r>
 8004066:	2800      	cmp	r0, #0
 8004068:	d0d5      	beq.n	8004016 <__swbuf_r+0x20>
 800406a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800406e:	e7f4      	b.n	800405a <__swbuf_r+0x64>

08004070 <__swsetup_r>:
 8004070:	b538      	push	{r3, r4, r5, lr}
 8004072:	4b2a      	ldr	r3, [pc, #168]	; (800411c <__swsetup_r+0xac>)
 8004074:	4605      	mov	r5, r0
 8004076:	6818      	ldr	r0, [r3, #0]
 8004078:	460c      	mov	r4, r1
 800407a:	b118      	cbz	r0, 8004084 <__swsetup_r+0x14>
 800407c:	6a03      	ldr	r3, [r0, #32]
 800407e:	b90b      	cbnz	r3, 8004084 <__swsetup_r+0x14>
 8004080:	f7ff fe1c 	bl	8003cbc <__sinit>
 8004084:	89a3      	ldrh	r3, [r4, #12]
 8004086:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800408a:	0718      	lsls	r0, r3, #28
 800408c:	d422      	bmi.n	80040d4 <__swsetup_r+0x64>
 800408e:	06d9      	lsls	r1, r3, #27
 8004090:	d407      	bmi.n	80040a2 <__swsetup_r+0x32>
 8004092:	2309      	movs	r3, #9
 8004094:	602b      	str	r3, [r5, #0]
 8004096:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800409a:	81a3      	strh	r3, [r4, #12]
 800409c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040a0:	e034      	b.n	800410c <__swsetup_r+0x9c>
 80040a2:	0758      	lsls	r0, r3, #29
 80040a4:	d512      	bpl.n	80040cc <__swsetup_r+0x5c>
 80040a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040a8:	b141      	cbz	r1, 80040bc <__swsetup_r+0x4c>
 80040aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040ae:	4299      	cmp	r1, r3
 80040b0:	d002      	beq.n	80040b8 <__swsetup_r+0x48>
 80040b2:	4628      	mov	r0, r5
 80040b4:	f000 f8ae 	bl	8004214 <_free_r>
 80040b8:	2300      	movs	r3, #0
 80040ba:	6363      	str	r3, [r4, #52]	; 0x34
 80040bc:	89a3      	ldrh	r3, [r4, #12]
 80040be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80040c2:	81a3      	strh	r3, [r4, #12]
 80040c4:	2300      	movs	r3, #0
 80040c6:	6063      	str	r3, [r4, #4]
 80040c8:	6923      	ldr	r3, [r4, #16]
 80040ca:	6023      	str	r3, [r4, #0]
 80040cc:	89a3      	ldrh	r3, [r4, #12]
 80040ce:	f043 0308 	orr.w	r3, r3, #8
 80040d2:	81a3      	strh	r3, [r4, #12]
 80040d4:	6923      	ldr	r3, [r4, #16]
 80040d6:	b94b      	cbnz	r3, 80040ec <__swsetup_r+0x7c>
 80040d8:	89a3      	ldrh	r3, [r4, #12]
 80040da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80040de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040e2:	d003      	beq.n	80040ec <__swsetup_r+0x7c>
 80040e4:	4621      	mov	r1, r4
 80040e6:	4628      	mov	r0, r5
 80040e8:	f000 fd3c 	bl	8004b64 <__smakebuf_r>
 80040ec:	89a0      	ldrh	r0, [r4, #12]
 80040ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80040f2:	f010 0301 	ands.w	r3, r0, #1
 80040f6:	d00a      	beq.n	800410e <__swsetup_r+0x9e>
 80040f8:	2300      	movs	r3, #0
 80040fa:	60a3      	str	r3, [r4, #8]
 80040fc:	6963      	ldr	r3, [r4, #20]
 80040fe:	425b      	negs	r3, r3
 8004100:	61a3      	str	r3, [r4, #24]
 8004102:	6923      	ldr	r3, [r4, #16]
 8004104:	b943      	cbnz	r3, 8004118 <__swsetup_r+0xa8>
 8004106:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800410a:	d1c4      	bne.n	8004096 <__swsetup_r+0x26>
 800410c:	bd38      	pop	{r3, r4, r5, pc}
 800410e:	0781      	lsls	r1, r0, #30
 8004110:	bf58      	it	pl
 8004112:	6963      	ldrpl	r3, [r4, #20]
 8004114:	60a3      	str	r3, [r4, #8]
 8004116:	e7f4      	b.n	8004102 <__swsetup_r+0x92>
 8004118:	2000      	movs	r0, #0
 800411a:	e7f7      	b.n	800410c <__swsetup_r+0x9c>
 800411c:	20000064 	.word	0x20000064

08004120 <memset>:
 8004120:	4402      	add	r2, r0
 8004122:	4603      	mov	r3, r0
 8004124:	4293      	cmp	r3, r2
 8004126:	d100      	bne.n	800412a <memset+0xa>
 8004128:	4770      	bx	lr
 800412a:	f803 1b01 	strb.w	r1, [r3], #1
 800412e:	e7f9      	b.n	8004124 <memset+0x4>

08004130 <_close_r>:
 8004130:	b538      	push	{r3, r4, r5, lr}
 8004132:	4d06      	ldr	r5, [pc, #24]	; (800414c <_close_r+0x1c>)
 8004134:	2300      	movs	r3, #0
 8004136:	4604      	mov	r4, r0
 8004138:	4608      	mov	r0, r1
 800413a:	602b      	str	r3, [r5, #0]
 800413c:	f7fd f929 	bl	8001392 <_close>
 8004140:	1c43      	adds	r3, r0, #1
 8004142:	d102      	bne.n	800414a <_close_r+0x1a>
 8004144:	682b      	ldr	r3, [r5, #0]
 8004146:	b103      	cbz	r3, 800414a <_close_r+0x1a>
 8004148:	6023      	str	r3, [r4, #0]
 800414a:	bd38      	pop	{r3, r4, r5, pc}
 800414c:	2000027c 	.word	0x2000027c

08004150 <_lseek_r>:
 8004150:	b538      	push	{r3, r4, r5, lr}
 8004152:	4d07      	ldr	r5, [pc, #28]	; (8004170 <_lseek_r+0x20>)
 8004154:	4604      	mov	r4, r0
 8004156:	4608      	mov	r0, r1
 8004158:	4611      	mov	r1, r2
 800415a:	2200      	movs	r2, #0
 800415c:	602a      	str	r2, [r5, #0]
 800415e:	461a      	mov	r2, r3
 8004160:	f7fd f93e 	bl	80013e0 <_lseek>
 8004164:	1c43      	adds	r3, r0, #1
 8004166:	d102      	bne.n	800416e <_lseek_r+0x1e>
 8004168:	682b      	ldr	r3, [r5, #0]
 800416a:	b103      	cbz	r3, 800416e <_lseek_r+0x1e>
 800416c:	6023      	str	r3, [r4, #0]
 800416e:	bd38      	pop	{r3, r4, r5, pc}
 8004170:	2000027c 	.word	0x2000027c

08004174 <_read_r>:
 8004174:	b538      	push	{r3, r4, r5, lr}
 8004176:	4d07      	ldr	r5, [pc, #28]	; (8004194 <_read_r+0x20>)
 8004178:	4604      	mov	r4, r0
 800417a:	4608      	mov	r0, r1
 800417c:	4611      	mov	r1, r2
 800417e:	2200      	movs	r2, #0
 8004180:	602a      	str	r2, [r5, #0]
 8004182:	461a      	mov	r2, r3
 8004184:	f7fd f8e8 	bl	8001358 <_read>
 8004188:	1c43      	adds	r3, r0, #1
 800418a:	d102      	bne.n	8004192 <_read_r+0x1e>
 800418c:	682b      	ldr	r3, [r5, #0]
 800418e:	b103      	cbz	r3, 8004192 <_read_r+0x1e>
 8004190:	6023      	str	r3, [r4, #0]
 8004192:	bd38      	pop	{r3, r4, r5, pc}
 8004194:	2000027c 	.word	0x2000027c

08004198 <_write_r>:
 8004198:	b538      	push	{r3, r4, r5, lr}
 800419a:	4d07      	ldr	r5, [pc, #28]	; (80041b8 <_write_r+0x20>)
 800419c:	4604      	mov	r4, r0
 800419e:	4608      	mov	r0, r1
 80041a0:	4611      	mov	r1, r2
 80041a2:	2200      	movs	r2, #0
 80041a4:	602a      	str	r2, [r5, #0]
 80041a6:	461a      	mov	r2, r3
 80041a8:	f7fc fd06 	bl	8000bb8 <_write>
 80041ac:	1c43      	adds	r3, r0, #1
 80041ae:	d102      	bne.n	80041b6 <_write_r+0x1e>
 80041b0:	682b      	ldr	r3, [r5, #0]
 80041b2:	b103      	cbz	r3, 80041b6 <_write_r+0x1e>
 80041b4:	6023      	str	r3, [r4, #0]
 80041b6:	bd38      	pop	{r3, r4, r5, pc}
 80041b8:	2000027c 	.word	0x2000027c

080041bc <__errno>:
 80041bc:	4b01      	ldr	r3, [pc, #4]	; (80041c4 <__errno+0x8>)
 80041be:	6818      	ldr	r0, [r3, #0]
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	20000064 	.word	0x20000064

080041c8 <__libc_init_array>:
 80041c8:	b570      	push	{r4, r5, r6, lr}
 80041ca:	4d0d      	ldr	r5, [pc, #52]	; (8004200 <__libc_init_array+0x38>)
 80041cc:	4c0d      	ldr	r4, [pc, #52]	; (8004204 <__libc_init_array+0x3c>)
 80041ce:	1b64      	subs	r4, r4, r5
 80041d0:	10a4      	asrs	r4, r4, #2
 80041d2:	2600      	movs	r6, #0
 80041d4:	42a6      	cmp	r6, r4
 80041d6:	d109      	bne.n	80041ec <__libc_init_array+0x24>
 80041d8:	4d0b      	ldr	r5, [pc, #44]	; (8004208 <__libc_init_array+0x40>)
 80041da:	4c0c      	ldr	r4, [pc, #48]	; (800420c <__libc_init_array+0x44>)
 80041dc:	f000 fd30 	bl	8004c40 <_init>
 80041e0:	1b64      	subs	r4, r4, r5
 80041e2:	10a4      	asrs	r4, r4, #2
 80041e4:	2600      	movs	r6, #0
 80041e6:	42a6      	cmp	r6, r4
 80041e8:	d105      	bne.n	80041f6 <__libc_init_array+0x2e>
 80041ea:	bd70      	pop	{r4, r5, r6, pc}
 80041ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80041f0:	4798      	blx	r3
 80041f2:	3601      	adds	r6, #1
 80041f4:	e7ee      	b.n	80041d4 <__libc_init_array+0xc>
 80041f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80041fa:	4798      	blx	r3
 80041fc:	3601      	adds	r6, #1
 80041fe:	e7f2      	b.n	80041e6 <__libc_init_array+0x1e>
 8004200:	08004d58 	.word	0x08004d58
 8004204:	08004d58 	.word	0x08004d58
 8004208:	08004d58 	.word	0x08004d58
 800420c:	08004d5c 	.word	0x08004d5c

08004210 <__retarget_lock_acquire_recursive>:
 8004210:	4770      	bx	lr

08004212 <__retarget_lock_release_recursive>:
 8004212:	4770      	bx	lr

08004214 <_free_r>:
 8004214:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004216:	2900      	cmp	r1, #0
 8004218:	d044      	beq.n	80042a4 <_free_r+0x90>
 800421a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800421e:	9001      	str	r0, [sp, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	f1a1 0404 	sub.w	r4, r1, #4
 8004226:	bfb8      	it	lt
 8004228:	18e4      	addlt	r4, r4, r3
 800422a:	f000 f8e7 	bl	80043fc <__malloc_lock>
 800422e:	4a1e      	ldr	r2, [pc, #120]	; (80042a8 <_free_r+0x94>)
 8004230:	9801      	ldr	r0, [sp, #4]
 8004232:	6813      	ldr	r3, [r2, #0]
 8004234:	b933      	cbnz	r3, 8004244 <_free_r+0x30>
 8004236:	6063      	str	r3, [r4, #4]
 8004238:	6014      	str	r4, [r2, #0]
 800423a:	b003      	add	sp, #12
 800423c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004240:	f000 b8e2 	b.w	8004408 <__malloc_unlock>
 8004244:	42a3      	cmp	r3, r4
 8004246:	d908      	bls.n	800425a <_free_r+0x46>
 8004248:	6825      	ldr	r5, [r4, #0]
 800424a:	1961      	adds	r1, r4, r5
 800424c:	428b      	cmp	r3, r1
 800424e:	bf01      	itttt	eq
 8004250:	6819      	ldreq	r1, [r3, #0]
 8004252:	685b      	ldreq	r3, [r3, #4]
 8004254:	1949      	addeq	r1, r1, r5
 8004256:	6021      	streq	r1, [r4, #0]
 8004258:	e7ed      	b.n	8004236 <_free_r+0x22>
 800425a:	461a      	mov	r2, r3
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	b10b      	cbz	r3, 8004264 <_free_r+0x50>
 8004260:	42a3      	cmp	r3, r4
 8004262:	d9fa      	bls.n	800425a <_free_r+0x46>
 8004264:	6811      	ldr	r1, [r2, #0]
 8004266:	1855      	adds	r5, r2, r1
 8004268:	42a5      	cmp	r5, r4
 800426a:	d10b      	bne.n	8004284 <_free_r+0x70>
 800426c:	6824      	ldr	r4, [r4, #0]
 800426e:	4421      	add	r1, r4
 8004270:	1854      	adds	r4, r2, r1
 8004272:	42a3      	cmp	r3, r4
 8004274:	6011      	str	r1, [r2, #0]
 8004276:	d1e0      	bne.n	800423a <_free_r+0x26>
 8004278:	681c      	ldr	r4, [r3, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	6053      	str	r3, [r2, #4]
 800427e:	440c      	add	r4, r1
 8004280:	6014      	str	r4, [r2, #0]
 8004282:	e7da      	b.n	800423a <_free_r+0x26>
 8004284:	d902      	bls.n	800428c <_free_r+0x78>
 8004286:	230c      	movs	r3, #12
 8004288:	6003      	str	r3, [r0, #0]
 800428a:	e7d6      	b.n	800423a <_free_r+0x26>
 800428c:	6825      	ldr	r5, [r4, #0]
 800428e:	1961      	adds	r1, r4, r5
 8004290:	428b      	cmp	r3, r1
 8004292:	bf04      	itt	eq
 8004294:	6819      	ldreq	r1, [r3, #0]
 8004296:	685b      	ldreq	r3, [r3, #4]
 8004298:	6063      	str	r3, [r4, #4]
 800429a:	bf04      	itt	eq
 800429c:	1949      	addeq	r1, r1, r5
 800429e:	6021      	streq	r1, [r4, #0]
 80042a0:	6054      	str	r4, [r2, #4]
 80042a2:	e7ca      	b.n	800423a <_free_r+0x26>
 80042a4:	b003      	add	sp, #12
 80042a6:	bd30      	pop	{r4, r5, pc}
 80042a8:	20000284 	.word	0x20000284

080042ac <malloc>:
 80042ac:	4b02      	ldr	r3, [pc, #8]	; (80042b8 <malloc+0xc>)
 80042ae:	4601      	mov	r1, r0
 80042b0:	6818      	ldr	r0, [r3, #0]
 80042b2:	f000 b823 	b.w	80042fc <_malloc_r>
 80042b6:	bf00      	nop
 80042b8:	20000064 	.word	0x20000064

080042bc <sbrk_aligned>:
 80042bc:	b570      	push	{r4, r5, r6, lr}
 80042be:	4e0e      	ldr	r6, [pc, #56]	; (80042f8 <sbrk_aligned+0x3c>)
 80042c0:	460c      	mov	r4, r1
 80042c2:	6831      	ldr	r1, [r6, #0]
 80042c4:	4605      	mov	r5, r0
 80042c6:	b911      	cbnz	r1, 80042ce <sbrk_aligned+0x12>
 80042c8:	f000 fcaa 	bl	8004c20 <_sbrk_r>
 80042cc:	6030      	str	r0, [r6, #0]
 80042ce:	4621      	mov	r1, r4
 80042d0:	4628      	mov	r0, r5
 80042d2:	f000 fca5 	bl	8004c20 <_sbrk_r>
 80042d6:	1c43      	adds	r3, r0, #1
 80042d8:	d00a      	beq.n	80042f0 <sbrk_aligned+0x34>
 80042da:	1cc4      	adds	r4, r0, #3
 80042dc:	f024 0403 	bic.w	r4, r4, #3
 80042e0:	42a0      	cmp	r0, r4
 80042e2:	d007      	beq.n	80042f4 <sbrk_aligned+0x38>
 80042e4:	1a21      	subs	r1, r4, r0
 80042e6:	4628      	mov	r0, r5
 80042e8:	f000 fc9a 	bl	8004c20 <_sbrk_r>
 80042ec:	3001      	adds	r0, #1
 80042ee:	d101      	bne.n	80042f4 <sbrk_aligned+0x38>
 80042f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80042f4:	4620      	mov	r0, r4
 80042f6:	bd70      	pop	{r4, r5, r6, pc}
 80042f8:	20000288 	.word	0x20000288

080042fc <_malloc_r>:
 80042fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004300:	1ccd      	adds	r5, r1, #3
 8004302:	f025 0503 	bic.w	r5, r5, #3
 8004306:	3508      	adds	r5, #8
 8004308:	2d0c      	cmp	r5, #12
 800430a:	bf38      	it	cc
 800430c:	250c      	movcc	r5, #12
 800430e:	2d00      	cmp	r5, #0
 8004310:	4607      	mov	r7, r0
 8004312:	db01      	blt.n	8004318 <_malloc_r+0x1c>
 8004314:	42a9      	cmp	r1, r5
 8004316:	d905      	bls.n	8004324 <_malloc_r+0x28>
 8004318:	230c      	movs	r3, #12
 800431a:	603b      	str	r3, [r7, #0]
 800431c:	2600      	movs	r6, #0
 800431e:	4630      	mov	r0, r6
 8004320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004324:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80043f8 <_malloc_r+0xfc>
 8004328:	f000 f868 	bl	80043fc <__malloc_lock>
 800432c:	f8d8 3000 	ldr.w	r3, [r8]
 8004330:	461c      	mov	r4, r3
 8004332:	bb5c      	cbnz	r4, 800438c <_malloc_r+0x90>
 8004334:	4629      	mov	r1, r5
 8004336:	4638      	mov	r0, r7
 8004338:	f7ff ffc0 	bl	80042bc <sbrk_aligned>
 800433c:	1c43      	adds	r3, r0, #1
 800433e:	4604      	mov	r4, r0
 8004340:	d155      	bne.n	80043ee <_malloc_r+0xf2>
 8004342:	f8d8 4000 	ldr.w	r4, [r8]
 8004346:	4626      	mov	r6, r4
 8004348:	2e00      	cmp	r6, #0
 800434a:	d145      	bne.n	80043d8 <_malloc_r+0xdc>
 800434c:	2c00      	cmp	r4, #0
 800434e:	d048      	beq.n	80043e2 <_malloc_r+0xe6>
 8004350:	6823      	ldr	r3, [r4, #0]
 8004352:	4631      	mov	r1, r6
 8004354:	4638      	mov	r0, r7
 8004356:	eb04 0903 	add.w	r9, r4, r3
 800435a:	f000 fc61 	bl	8004c20 <_sbrk_r>
 800435e:	4581      	cmp	r9, r0
 8004360:	d13f      	bne.n	80043e2 <_malloc_r+0xe6>
 8004362:	6821      	ldr	r1, [r4, #0]
 8004364:	1a6d      	subs	r5, r5, r1
 8004366:	4629      	mov	r1, r5
 8004368:	4638      	mov	r0, r7
 800436a:	f7ff ffa7 	bl	80042bc <sbrk_aligned>
 800436e:	3001      	adds	r0, #1
 8004370:	d037      	beq.n	80043e2 <_malloc_r+0xe6>
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	442b      	add	r3, r5
 8004376:	6023      	str	r3, [r4, #0]
 8004378:	f8d8 3000 	ldr.w	r3, [r8]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d038      	beq.n	80043f2 <_malloc_r+0xf6>
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	42a2      	cmp	r2, r4
 8004384:	d12b      	bne.n	80043de <_malloc_r+0xe2>
 8004386:	2200      	movs	r2, #0
 8004388:	605a      	str	r2, [r3, #4]
 800438a:	e00f      	b.n	80043ac <_malloc_r+0xb0>
 800438c:	6822      	ldr	r2, [r4, #0]
 800438e:	1b52      	subs	r2, r2, r5
 8004390:	d41f      	bmi.n	80043d2 <_malloc_r+0xd6>
 8004392:	2a0b      	cmp	r2, #11
 8004394:	d917      	bls.n	80043c6 <_malloc_r+0xca>
 8004396:	1961      	adds	r1, r4, r5
 8004398:	42a3      	cmp	r3, r4
 800439a:	6025      	str	r5, [r4, #0]
 800439c:	bf18      	it	ne
 800439e:	6059      	strne	r1, [r3, #4]
 80043a0:	6863      	ldr	r3, [r4, #4]
 80043a2:	bf08      	it	eq
 80043a4:	f8c8 1000 	streq.w	r1, [r8]
 80043a8:	5162      	str	r2, [r4, r5]
 80043aa:	604b      	str	r3, [r1, #4]
 80043ac:	4638      	mov	r0, r7
 80043ae:	f104 060b 	add.w	r6, r4, #11
 80043b2:	f000 f829 	bl	8004408 <__malloc_unlock>
 80043b6:	f026 0607 	bic.w	r6, r6, #7
 80043ba:	1d23      	adds	r3, r4, #4
 80043bc:	1af2      	subs	r2, r6, r3
 80043be:	d0ae      	beq.n	800431e <_malloc_r+0x22>
 80043c0:	1b9b      	subs	r3, r3, r6
 80043c2:	50a3      	str	r3, [r4, r2]
 80043c4:	e7ab      	b.n	800431e <_malloc_r+0x22>
 80043c6:	42a3      	cmp	r3, r4
 80043c8:	6862      	ldr	r2, [r4, #4]
 80043ca:	d1dd      	bne.n	8004388 <_malloc_r+0x8c>
 80043cc:	f8c8 2000 	str.w	r2, [r8]
 80043d0:	e7ec      	b.n	80043ac <_malloc_r+0xb0>
 80043d2:	4623      	mov	r3, r4
 80043d4:	6864      	ldr	r4, [r4, #4]
 80043d6:	e7ac      	b.n	8004332 <_malloc_r+0x36>
 80043d8:	4634      	mov	r4, r6
 80043da:	6876      	ldr	r6, [r6, #4]
 80043dc:	e7b4      	b.n	8004348 <_malloc_r+0x4c>
 80043de:	4613      	mov	r3, r2
 80043e0:	e7cc      	b.n	800437c <_malloc_r+0x80>
 80043e2:	230c      	movs	r3, #12
 80043e4:	603b      	str	r3, [r7, #0]
 80043e6:	4638      	mov	r0, r7
 80043e8:	f000 f80e 	bl	8004408 <__malloc_unlock>
 80043ec:	e797      	b.n	800431e <_malloc_r+0x22>
 80043ee:	6025      	str	r5, [r4, #0]
 80043f0:	e7dc      	b.n	80043ac <_malloc_r+0xb0>
 80043f2:	605b      	str	r3, [r3, #4]
 80043f4:	deff      	udf	#255	; 0xff
 80043f6:	bf00      	nop
 80043f8:	20000284 	.word	0x20000284

080043fc <__malloc_lock>:
 80043fc:	4801      	ldr	r0, [pc, #4]	; (8004404 <__malloc_lock+0x8>)
 80043fe:	f7ff bf07 	b.w	8004210 <__retarget_lock_acquire_recursive>
 8004402:	bf00      	nop
 8004404:	20000280 	.word	0x20000280

08004408 <__malloc_unlock>:
 8004408:	4801      	ldr	r0, [pc, #4]	; (8004410 <__malloc_unlock+0x8>)
 800440a:	f7ff bf02 	b.w	8004212 <__retarget_lock_release_recursive>
 800440e:	bf00      	nop
 8004410:	20000280 	.word	0x20000280

08004414 <__sfputc_r>:
 8004414:	6893      	ldr	r3, [r2, #8]
 8004416:	3b01      	subs	r3, #1
 8004418:	2b00      	cmp	r3, #0
 800441a:	b410      	push	{r4}
 800441c:	6093      	str	r3, [r2, #8]
 800441e:	da08      	bge.n	8004432 <__sfputc_r+0x1e>
 8004420:	6994      	ldr	r4, [r2, #24]
 8004422:	42a3      	cmp	r3, r4
 8004424:	db01      	blt.n	800442a <__sfputc_r+0x16>
 8004426:	290a      	cmp	r1, #10
 8004428:	d103      	bne.n	8004432 <__sfputc_r+0x1e>
 800442a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800442e:	f7ff bde2 	b.w	8003ff6 <__swbuf_r>
 8004432:	6813      	ldr	r3, [r2, #0]
 8004434:	1c58      	adds	r0, r3, #1
 8004436:	6010      	str	r0, [r2, #0]
 8004438:	7019      	strb	r1, [r3, #0]
 800443a:	4608      	mov	r0, r1
 800443c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004440:	4770      	bx	lr

08004442 <__sfputs_r>:
 8004442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004444:	4606      	mov	r6, r0
 8004446:	460f      	mov	r7, r1
 8004448:	4614      	mov	r4, r2
 800444a:	18d5      	adds	r5, r2, r3
 800444c:	42ac      	cmp	r4, r5
 800444e:	d101      	bne.n	8004454 <__sfputs_r+0x12>
 8004450:	2000      	movs	r0, #0
 8004452:	e007      	b.n	8004464 <__sfputs_r+0x22>
 8004454:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004458:	463a      	mov	r2, r7
 800445a:	4630      	mov	r0, r6
 800445c:	f7ff ffda 	bl	8004414 <__sfputc_r>
 8004460:	1c43      	adds	r3, r0, #1
 8004462:	d1f3      	bne.n	800444c <__sfputs_r+0xa>
 8004464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004468 <_vfiprintf_r>:
 8004468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800446c:	460d      	mov	r5, r1
 800446e:	b09d      	sub	sp, #116	; 0x74
 8004470:	4614      	mov	r4, r2
 8004472:	4698      	mov	r8, r3
 8004474:	4606      	mov	r6, r0
 8004476:	b118      	cbz	r0, 8004480 <_vfiprintf_r+0x18>
 8004478:	6a03      	ldr	r3, [r0, #32]
 800447a:	b90b      	cbnz	r3, 8004480 <_vfiprintf_r+0x18>
 800447c:	f7ff fc1e 	bl	8003cbc <__sinit>
 8004480:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004482:	07d9      	lsls	r1, r3, #31
 8004484:	d405      	bmi.n	8004492 <_vfiprintf_r+0x2a>
 8004486:	89ab      	ldrh	r3, [r5, #12]
 8004488:	059a      	lsls	r2, r3, #22
 800448a:	d402      	bmi.n	8004492 <_vfiprintf_r+0x2a>
 800448c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800448e:	f7ff febf 	bl	8004210 <__retarget_lock_acquire_recursive>
 8004492:	89ab      	ldrh	r3, [r5, #12]
 8004494:	071b      	lsls	r3, r3, #28
 8004496:	d501      	bpl.n	800449c <_vfiprintf_r+0x34>
 8004498:	692b      	ldr	r3, [r5, #16]
 800449a:	b99b      	cbnz	r3, 80044c4 <_vfiprintf_r+0x5c>
 800449c:	4629      	mov	r1, r5
 800449e:	4630      	mov	r0, r6
 80044a0:	f7ff fde6 	bl	8004070 <__swsetup_r>
 80044a4:	b170      	cbz	r0, 80044c4 <_vfiprintf_r+0x5c>
 80044a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044a8:	07dc      	lsls	r4, r3, #31
 80044aa:	d504      	bpl.n	80044b6 <_vfiprintf_r+0x4e>
 80044ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044b0:	b01d      	add	sp, #116	; 0x74
 80044b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044b6:	89ab      	ldrh	r3, [r5, #12]
 80044b8:	0598      	lsls	r0, r3, #22
 80044ba:	d4f7      	bmi.n	80044ac <_vfiprintf_r+0x44>
 80044bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044be:	f7ff fea8 	bl	8004212 <__retarget_lock_release_recursive>
 80044c2:	e7f3      	b.n	80044ac <_vfiprintf_r+0x44>
 80044c4:	2300      	movs	r3, #0
 80044c6:	9309      	str	r3, [sp, #36]	; 0x24
 80044c8:	2320      	movs	r3, #32
 80044ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80044ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80044d2:	2330      	movs	r3, #48	; 0x30
 80044d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004688 <_vfiprintf_r+0x220>
 80044d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80044dc:	f04f 0901 	mov.w	r9, #1
 80044e0:	4623      	mov	r3, r4
 80044e2:	469a      	mov	sl, r3
 80044e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044e8:	b10a      	cbz	r2, 80044ee <_vfiprintf_r+0x86>
 80044ea:	2a25      	cmp	r2, #37	; 0x25
 80044ec:	d1f9      	bne.n	80044e2 <_vfiprintf_r+0x7a>
 80044ee:	ebba 0b04 	subs.w	fp, sl, r4
 80044f2:	d00b      	beq.n	800450c <_vfiprintf_r+0xa4>
 80044f4:	465b      	mov	r3, fp
 80044f6:	4622      	mov	r2, r4
 80044f8:	4629      	mov	r1, r5
 80044fa:	4630      	mov	r0, r6
 80044fc:	f7ff ffa1 	bl	8004442 <__sfputs_r>
 8004500:	3001      	adds	r0, #1
 8004502:	f000 80a9 	beq.w	8004658 <_vfiprintf_r+0x1f0>
 8004506:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004508:	445a      	add	r2, fp
 800450a:	9209      	str	r2, [sp, #36]	; 0x24
 800450c:	f89a 3000 	ldrb.w	r3, [sl]
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 80a1 	beq.w	8004658 <_vfiprintf_r+0x1f0>
 8004516:	2300      	movs	r3, #0
 8004518:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800451c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004520:	f10a 0a01 	add.w	sl, sl, #1
 8004524:	9304      	str	r3, [sp, #16]
 8004526:	9307      	str	r3, [sp, #28]
 8004528:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800452c:	931a      	str	r3, [sp, #104]	; 0x68
 800452e:	4654      	mov	r4, sl
 8004530:	2205      	movs	r2, #5
 8004532:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004536:	4854      	ldr	r0, [pc, #336]	; (8004688 <_vfiprintf_r+0x220>)
 8004538:	f7fb fe6a 	bl	8000210 <memchr>
 800453c:	9a04      	ldr	r2, [sp, #16]
 800453e:	b9d8      	cbnz	r0, 8004578 <_vfiprintf_r+0x110>
 8004540:	06d1      	lsls	r1, r2, #27
 8004542:	bf44      	itt	mi
 8004544:	2320      	movmi	r3, #32
 8004546:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800454a:	0713      	lsls	r3, r2, #28
 800454c:	bf44      	itt	mi
 800454e:	232b      	movmi	r3, #43	; 0x2b
 8004550:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004554:	f89a 3000 	ldrb.w	r3, [sl]
 8004558:	2b2a      	cmp	r3, #42	; 0x2a
 800455a:	d015      	beq.n	8004588 <_vfiprintf_r+0x120>
 800455c:	9a07      	ldr	r2, [sp, #28]
 800455e:	4654      	mov	r4, sl
 8004560:	2000      	movs	r0, #0
 8004562:	f04f 0c0a 	mov.w	ip, #10
 8004566:	4621      	mov	r1, r4
 8004568:	f811 3b01 	ldrb.w	r3, [r1], #1
 800456c:	3b30      	subs	r3, #48	; 0x30
 800456e:	2b09      	cmp	r3, #9
 8004570:	d94d      	bls.n	800460e <_vfiprintf_r+0x1a6>
 8004572:	b1b0      	cbz	r0, 80045a2 <_vfiprintf_r+0x13a>
 8004574:	9207      	str	r2, [sp, #28]
 8004576:	e014      	b.n	80045a2 <_vfiprintf_r+0x13a>
 8004578:	eba0 0308 	sub.w	r3, r0, r8
 800457c:	fa09 f303 	lsl.w	r3, r9, r3
 8004580:	4313      	orrs	r3, r2
 8004582:	9304      	str	r3, [sp, #16]
 8004584:	46a2      	mov	sl, r4
 8004586:	e7d2      	b.n	800452e <_vfiprintf_r+0xc6>
 8004588:	9b03      	ldr	r3, [sp, #12]
 800458a:	1d19      	adds	r1, r3, #4
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	9103      	str	r1, [sp, #12]
 8004590:	2b00      	cmp	r3, #0
 8004592:	bfbb      	ittet	lt
 8004594:	425b      	neglt	r3, r3
 8004596:	f042 0202 	orrlt.w	r2, r2, #2
 800459a:	9307      	strge	r3, [sp, #28]
 800459c:	9307      	strlt	r3, [sp, #28]
 800459e:	bfb8      	it	lt
 80045a0:	9204      	strlt	r2, [sp, #16]
 80045a2:	7823      	ldrb	r3, [r4, #0]
 80045a4:	2b2e      	cmp	r3, #46	; 0x2e
 80045a6:	d10c      	bne.n	80045c2 <_vfiprintf_r+0x15a>
 80045a8:	7863      	ldrb	r3, [r4, #1]
 80045aa:	2b2a      	cmp	r3, #42	; 0x2a
 80045ac:	d134      	bne.n	8004618 <_vfiprintf_r+0x1b0>
 80045ae:	9b03      	ldr	r3, [sp, #12]
 80045b0:	1d1a      	adds	r2, r3, #4
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	9203      	str	r2, [sp, #12]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	bfb8      	it	lt
 80045ba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80045be:	3402      	adds	r4, #2
 80045c0:	9305      	str	r3, [sp, #20]
 80045c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004698 <_vfiprintf_r+0x230>
 80045c6:	7821      	ldrb	r1, [r4, #0]
 80045c8:	2203      	movs	r2, #3
 80045ca:	4650      	mov	r0, sl
 80045cc:	f7fb fe20 	bl	8000210 <memchr>
 80045d0:	b138      	cbz	r0, 80045e2 <_vfiprintf_r+0x17a>
 80045d2:	9b04      	ldr	r3, [sp, #16]
 80045d4:	eba0 000a 	sub.w	r0, r0, sl
 80045d8:	2240      	movs	r2, #64	; 0x40
 80045da:	4082      	lsls	r2, r0
 80045dc:	4313      	orrs	r3, r2
 80045de:	3401      	adds	r4, #1
 80045e0:	9304      	str	r3, [sp, #16]
 80045e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045e6:	4829      	ldr	r0, [pc, #164]	; (800468c <_vfiprintf_r+0x224>)
 80045e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80045ec:	2206      	movs	r2, #6
 80045ee:	f7fb fe0f 	bl	8000210 <memchr>
 80045f2:	2800      	cmp	r0, #0
 80045f4:	d03f      	beq.n	8004676 <_vfiprintf_r+0x20e>
 80045f6:	4b26      	ldr	r3, [pc, #152]	; (8004690 <_vfiprintf_r+0x228>)
 80045f8:	bb1b      	cbnz	r3, 8004642 <_vfiprintf_r+0x1da>
 80045fa:	9b03      	ldr	r3, [sp, #12]
 80045fc:	3307      	adds	r3, #7
 80045fe:	f023 0307 	bic.w	r3, r3, #7
 8004602:	3308      	adds	r3, #8
 8004604:	9303      	str	r3, [sp, #12]
 8004606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004608:	443b      	add	r3, r7
 800460a:	9309      	str	r3, [sp, #36]	; 0x24
 800460c:	e768      	b.n	80044e0 <_vfiprintf_r+0x78>
 800460e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004612:	460c      	mov	r4, r1
 8004614:	2001      	movs	r0, #1
 8004616:	e7a6      	b.n	8004566 <_vfiprintf_r+0xfe>
 8004618:	2300      	movs	r3, #0
 800461a:	3401      	adds	r4, #1
 800461c:	9305      	str	r3, [sp, #20]
 800461e:	4619      	mov	r1, r3
 8004620:	f04f 0c0a 	mov.w	ip, #10
 8004624:	4620      	mov	r0, r4
 8004626:	f810 2b01 	ldrb.w	r2, [r0], #1
 800462a:	3a30      	subs	r2, #48	; 0x30
 800462c:	2a09      	cmp	r2, #9
 800462e:	d903      	bls.n	8004638 <_vfiprintf_r+0x1d0>
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0c6      	beq.n	80045c2 <_vfiprintf_r+0x15a>
 8004634:	9105      	str	r1, [sp, #20]
 8004636:	e7c4      	b.n	80045c2 <_vfiprintf_r+0x15a>
 8004638:	fb0c 2101 	mla	r1, ip, r1, r2
 800463c:	4604      	mov	r4, r0
 800463e:	2301      	movs	r3, #1
 8004640:	e7f0      	b.n	8004624 <_vfiprintf_r+0x1bc>
 8004642:	ab03      	add	r3, sp, #12
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	462a      	mov	r2, r5
 8004648:	4b12      	ldr	r3, [pc, #72]	; (8004694 <_vfiprintf_r+0x22c>)
 800464a:	a904      	add	r1, sp, #16
 800464c:	4630      	mov	r0, r6
 800464e:	f3af 8000 	nop.w
 8004652:	4607      	mov	r7, r0
 8004654:	1c78      	adds	r0, r7, #1
 8004656:	d1d6      	bne.n	8004606 <_vfiprintf_r+0x19e>
 8004658:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800465a:	07d9      	lsls	r1, r3, #31
 800465c:	d405      	bmi.n	800466a <_vfiprintf_r+0x202>
 800465e:	89ab      	ldrh	r3, [r5, #12]
 8004660:	059a      	lsls	r2, r3, #22
 8004662:	d402      	bmi.n	800466a <_vfiprintf_r+0x202>
 8004664:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004666:	f7ff fdd4 	bl	8004212 <__retarget_lock_release_recursive>
 800466a:	89ab      	ldrh	r3, [r5, #12]
 800466c:	065b      	lsls	r3, r3, #25
 800466e:	f53f af1d 	bmi.w	80044ac <_vfiprintf_r+0x44>
 8004672:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004674:	e71c      	b.n	80044b0 <_vfiprintf_r+0x48>
 8004676:	ab03      	add	r3, sp, #12
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	462a      	mov	r2, r5
 800467c:	4b05      	ldr	r3, [pc, #20]	; (8004694 <_vfiprintf_r+0x22c>)
 800467e:	a904      	add	r1, sp, #16
 8004680:	4630      	mov	r0, r6
 8004682:	f000 f879 	bl	8004778 <_printf_i>
 8004686:	e7e4      	b.n	8004652 <_vfiprintf_r+0x1ea>
 8004688:	08004d1c 	.word	0x08004d1c
 800468c:	08004d26 	.word	0x08004d26
 8004690:	00000000 	.word	0x00000000
 8004694:	08004443 	.word	0x08004443
 8004698:	08004d22 	.word	0x08004d22

0800469c <_printf_common>:
 800469c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046a0:	4616      	mov	r6, r2
 80046a2:	4699      	mov	r9, r3
 80046a4:	688a      	ldr	r2, [r1, #8]
 80046a6:	690b      	ldr	r3, [r1, #16]
 80046a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046ac:	4293      	cmp	r3, r2
 80046ae:	bfb8      	it	lt
 80046b0:	4613      	movlt	r3, r2
 80046b2:	6033      	str	r3, [r6, #0]
 80046b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046b8:	4607      	mov	r7, r0
 80046ba:	460c      	mov	r4, r1
 80046bc:	b10a      	cbz	r2, 80046c2 <_printf_common+0x26>
 80046be:	3301      	adds	r3, #1
 80046c0:	6033      	str	r3, [r6, #0]
 80046c2:	6823      	ldr	r3, [r4, #0]
 80046c4:	0699      	lsls	r1, r3, #26
 80046c6:	bf42      	ittt	mi
 80046c8:	6833      	ldrmi	r3, [r6, #0]
 80046ca:	3302      	addmi	r3, #2
 80046cc:	6033      	strmi	r3, [r6, #0]
 80046ce:	6825      	ldr	r5, [r4, #0]
 80046d0:	f015 0506 	ands.w	r5, r5, #6
 80046d4:	d106      	bne.n	80046e4 <_printf_common+0x48>
 80046d6:	f104 0a19 	add.w	sl, r4, #25
 80046da:	68e3      	ldr	r3, [r4, #12]
 80046dc:	6832      	ldr	r2, [r6, #0]
 80046de:	1a9b      	subs	r3, r3, r2
 80046e0:	42ab      	cmp	r3, r5
 80046e2:	dc26      	bgt.n	8004732 <_printf_common+0x96>
 80046e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046e8:	1e13      	subs	r3, r2, #0
 80046ea:	6822      	ldr	r2, [r4, #0]
 80046ec:	bf18      	it	ne
 80046ee:	2301      	movne	r3, #1
 80046f0:	0692      	lsls	r2, r2, #26
 80046f2:	d42b      	bmi.n	800474c <_printf_common+0xb0>
 80046f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046f8:	4649      	mov	r1, r9
 80046fa:	4638      	mov	r0, r7
 80046fc:	47c0      	blx	r8
 80046fe:	3001      	adds	r0, #1
 8004700:	d01e      	beq.n	8004740 <_printf_common+0xa4>
 8004702:	6823      	ldr	r3, [r4, #0]
 8004704:	6922      	ldr	r2, [r4, #16]
 8004706:	f003 0306 	and.w	r3, r3, #6
 800470a:	2b04      	cmp	r3, #4
 800470c:	bf02      	ittt	eq
 800470e:	68e5      	ldreq	r5, [r4, #12]
 8004710:	6833      	ldreq	r3, [r6, #0]
 8004712:	1aed      	subeq	r5, r5, r3
 8004714:	68a3      	ldr	r3, [r4, #8]
 8004716:	bf0c      	ite	eq
 8004718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800471c:	2500      	movne	r5, #0
 800471e:	4293      	cmp	r3, r2
 8004720:	bfc4      	itt	gt
 8004722:	1a9b      	subgt	r3, r3, r2
 8004724:	18ed      	addgt	r5, r5, r3
 8004726:	2600      	movs	r6, #0
 8004728:	341a      	adds	r4, #26
 800472a:	42b5      	cmp	r5, r6
 800472c:	d11a      	bne.n	8004764 <_printf_common+0xc8>
 800472e:	2000      	movs	r0, #0
 8004730:	e008      	b.n	8004744 <_printf_common+0xa8>
 8004732:	2301      	movs	r3, #1
 8004734:	4652      	mov	r2, sl
 8004736:	4649      	mov	r1, r9
 8004738:	4638      	mov	r0, r7
 800473a:	47c0      	blx	r8
 800473c:	3001      	adds	r0, #1
 800473e:	d103      	bne.n	8004748 <_printf_common+0xac>
 8004740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004748:	3501      	adds	r5, #1
 800474a:	e7c6      	b.n	80046da <_printf_common+0x3e>
 800474c:	18e1      	adds	r1, r4, r3
 800474e:	1c5a      	adds	r2, r3, #1
 8004750:	2030      	movs	r0, #48	; 0x30
 8004752:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004756:	4422      	add	r2, r4
 8004758:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800475c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004760:	3302      	adds	r3, #2
 8004762:	e7c7      	b.n	80046f4 <_printf_common+0x58>
 8004764:	2301      	movs	r3, #1
 8004766:	4622      	mov	r2, r4
 8004768:	4649      	mov	r1, r9
 800476a:	4638      	mov	r0, r7
 800476c:	47c0      	blx	r8
 800476e:	3001      	adds	r0, #1
 8004770:	d0e6      	beq.n	8004740 <_printf_common+0xa4>
 8004772:	3601      	adds	r6, #1
 8004774:	e7d9      	b.n	800472a <_printf_common+0x8e>
	...

08004778 <_printf_i>:
 8004778:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800477c:	7e0f      	ldrb	r7, [r1, #24]
 800477e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004780:	2f78      	cmp	r7, #120	; 0x78
 8004782:	4691      	mov	r9, r2
 8004784:	4680      	mov	r8, r0
 8004786:	460c      	mov	r4, r1
 8004788:	469a      	mov	sl, r3
 800478a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800478e:	d807      	bhi.n	80047a0 <_printf_i+0x28>
 8004790:	2f62      	cmp	r7, #98	; 0x62
 8004792:	d80a      	bhi.n	80047aa <_printf_i+0x32>
 8004794:	2f00      	cmp	r7, #0
 8004796:	f000 80d4 	beq.w	8004942 <_printf_i+0x1ca>
 800479a:	2f58      	cmp	r7, #88	; 0x58
 800479c:	f000 80c0 	beq.w	8004920 <_printf_i+0x1a8>
 80047a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80047a8:	e03a      	b.n	8004820 <_printf_i+0xa8>
 80047aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80047ae:	2b15      	cmp	r3, #21
 80047b0:	d8f6      	bhi.n	80047a0 <_printf_i+0x28>
 80047b2:	a101      	add	r1, pc, #4	; (adr r1, 80047b8 <_printf_i+0x40>)
 80047b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047b8:	08004811 	.word	0x08004811
 80047bc:	08004825 	.word	0x08004825
 80047c0:	080047a1 	.word	0x080047a1
 80047c4:	080047a1 	.word	0x080047a1
 80047c8:	080047a1 	.word	0x080047a1
 80047cc:	080047a1 	.word	0x080047a1
 80047d0:	08004825 	.word	0x08004825
 80047d4:	080047a1 	.word	0x080047a1
 80047d8:	080047a1 	.word	0x080047a1
 80047dc:	080047a1 	.word	0x080047a1
 80047e0:	080047a1 	.word	0x080047a1
 80047e4:	08004929 	.word	0x08004929
 80047e8:	08004851 	.word	0x08004851
 80047ec:	080048e3 	.word	0x080048e3
 80047f0:	080047a1 	.word	0x080047a1
 80047f4:	080047a1 	.word	0x080047a1
 80047f8:	0800494b 	.word	0x0800494b
 80047fc:	080047a1 	.word	0x080047a1
 8004800:	08004851 	.word	0x08004851
 8004804:	080047a1 	.word	0x080047a1
 8004808:	080047a1 	.word	0x080047a1
 800480c:	080048eb 	.word	0x080048eb
 8004810:	682b      	ldr	r3, [r5, #0]
 8004812:	1d1a      	adds	r2, r3, #4
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	602a      	str	r2, [r5, #0]
 8004818:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800481c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004820:	2301      	movs	r3, #1
 8004822:	e09f      	b.n	8004964 <_printf_i+0x1ec>
 8004824:	6820      	ldr	r0, [r4, #0]
 8004826:	682b      	ldr	r3, [r5, #0]
 8004828:	0607      	lsls	r7, r0, #24
 800482a:	f103 0104 	add.w	r1, r3, #4
 800482e:	6029      	str	r1, [r5, #0]
 8004830:	d501      	bpl.n	8004836 <_printf_i+0xbe>
 8004832:	681e      	ldr	r6, [r3, #0]
 8004834:	e003      	b.n	800483e <_printf_i+0xc6>
 8004836:	0646      	lsls	r6, r0, #25
 8004838:	d5fb      	bpl.n	8004832 <_printf_i+0xba>
 800483a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800483e:	2e00      	cmp	r6, #0
 8004840:	da03      	bge.n	800484a <_printf_i+0xd2>
 8004842:	232d      	movs	r3, #45	; 0x2d
 8004844:	4276      	negs	r6, r6
 8004846:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800484a:	485a      	ldr	r0, [pc, #360]	; (80049b4 <_printf_i+0x23c>)
 800484c:	230a      	movs	r3, #10
 800484e:	e012      	b.n	8004876 <_printf_i+0xfe>
 8004850:	682b      	ldr	r3, [r5, #0]
 8004852:	6820      	ldr	r0, [r4, #0]
 8004854:	1d19      	adds	r1, r3, #4
 8004856:	6029      	str	r1, [r5, #0]
 8004858:	0605      	lsls	r5, r0, #24
 800485a:	d501      	bpl.n	8004860 <_printf_i+0xe8>
 800485c:	681e      	ldr	r6, [r3, #0]
 800485e:	e002      	b.n	8004866 <_printf_i+0xee>
 8004860:	0641      	lsls	r1, r0, #25
 8004862:	d5fb      	bpl.n	800485c <_printf_i+0xe4>
 8004864:	881e      	ldrh	r6, [r3, #0]
 8004866:	4853      	ldr	r0, [pc, #332]	; (80049b4 <_printf_i+0x23c>)
 8004868:	2f6f      	cmp	r7, #111	; 0x6f
 800486a:	bf0c      	ite	eq
 800486c:	2308      	moveq	r3, #8
 800486e:	230a      	movne	r3, #10
 8004870:	2100      	movs	r1, #0
 8004872:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004876:	6865      	ldr	r5, [r4, #4]
 8004878:	60a5      	str	r5, [r4, #8]
 800487a:	2d00      	cmp	r5, #0
 800487c:	bfa2      	ittt	ge
 800487e:	6821      	ldrge	r1, [r4, #0]
 8004880:	f021 0104 	bicge.w	r1, r1, #4
 8004884:	6021      	strge	r1, [r4, #0]
 8004886:	b90e      	cbnz	r6, 800488c <_printf_i+0x114>
 8004888:	2d00      	cmp	r5, #0
 800488a:	d04b      	beq.n	8004924 <_printf_i+0x1ac>
 800488c:	4615      	mov	r5, r2
 800488e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004892:	fb03 6711 	mls	r7, r3, r1, r6
 8004896:	5dc7      	ldrb	r7, [r0, r7]
 8004898:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800489c:	4637      	mov	r7, r6
 800489e:	42bb      	cmp	r3, r7
 80048a0:	460e      	mov	r6, r1
 80048a2:	d9f4      	bls.n	800488e <_printf_i+0x116>
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	d10b      	bne.n	80048c0 <_printf_i+0x148>
 80048a8:	6823      	ldr	r3, [r4, #0]
 80048aa:	07de      	lsls	r6, r3, #31
 80048ac:	d508      	bpl.n	80048c0 <_printf_i+0x148>
 80048ae:	6923      	ldr	r3, [r4, #16]
 80048b0:	6861      	ldr	r1, [r4, #4]
 80048b2:	4299      	cmp	r1, r3
 80048b4:	bfde      	ittt	le
 80048b6:	2330      	movle	r3, #48	; 0x30
 80048b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80048bc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80048c0:	1b52      	subs	r2, r2, r5
 80048c2:	6122      	str	r2, [r4, #16]
 80048c4:	f8cd a000 	str.w	sl, [sp]
 80048c8:	464b      	mov	r3, r9
 80048ca:	aa03      	add	r2, sp, #12
 80048cc:	4621      	mov	r1, r4
 80048ce:	4640      	mov	r0, r8
 80048d0:	f7ff fee4 	bl	800469c <_printf_common>
 80048d4:	3001      	adds	r0, #1
 80048d6:	d14a      	bne.n	800496e <_printf_i+0x1f6>
 80048d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048dc:	b004      	add	sp, #16
 80048de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048e2:	6823      	ldr	r3, [r4, #0]
 80048e4:	f043 0320 	orr.w	r3, r3, #32
 80048e8:	6023      	str	r3, [r4, #0]
 80048ea:	4833      	ldr	r0, [pc, #204]	; (80049b8 <_printf_i+0x240>)
 80048ec:	2778      	movs	r7, #120	; 0x78
 80048ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80048f2:	6823      	ldr	r3, [r4, #0]
 80048f4:	6829      	ldr	r1, [r5, #0]
 80048f6:	061f      	lsls	r7, r3, #24
 80048f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80048fc:	d402      	bmi.n	8004904 <_printf_i+0x18c>
 80048fe:	065f      	lsls	r7, r3, #25
 8004900:	bf48      	it	mi
 8004902:	b2b6      	uxthmi	r6, r6
 8004904:	07df      	lsls	r7, r3, #31
 8004906:	bf48      	it	mi
 8004908:	f043 0320 	orrmi.w	r3, r3, #32
 800490c:	6029      	str	r1, [r5, #0]
 800490e:	bf48      	it	mi
 8004910:	6023      	strmi	r3, [r4, #0]
 8004912:	b91e      	cbnz	r6, 800491c <_printf_i+0x1a4>
 8004914:	6823      	ldr	r3, [r4, #0]
 8004916:	f023 0320 	bic.w	r3, r3, #32
 800491a:	6023      	str	r3, [r4, #0]
 800491c:	2310      	movs	r3, #16
 800491e:	e7a7      	b.n	8004870 <_printf_i+0xf8>
 8004920:	4824      	ldr	r0, [pc, #144]	; (80049b4 <_printf_i+0x23c>)
 8004922:	e7e4      	b.n	80048ee <_printf_i+0x176>
 8004924:	4615      	mov	r5, r2
 8004926:	e7bd      	b.n	80048a4 <_printf_i+0x12c>
 8004928:	682b      	ldr	r3, [r5, #0]
 800492a:	6826      	ldr	r6, [r4, #0]
 800492c:	6961      	ldr	r1, [r4, #20]
 800492e:	1d18      	adds	r0, r3, #4
 8004930:	6028      	str	r0, [r5, #0]
 8004932:	0635      	lsls	r5, r6, #24
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	d501      	bpl.n	800493c <_printf_i+0x1c4>
 8004938:	6019      	str	r1, [r3, #0]
 800493a:	e002      	b.n	8004942 <_printf_i+0x1ca>
 800493c:	0670      	lsls	r0, r6, #25
 800493e:	d5fb      	bpl.n	8004938 <_printf_i+0x1c0>
 8004940:	8019      	strh	r1, [r3, #0]
 8004942:	2300      	movs	r3, #0
 8004944:	6123      	str	r3, [r4, #16]
 8004946:	4615      	mov	r5, r2
 8004948:	e7bc      	b.n	80048c4 <_printf_i+0x14c>
 800494a:	682b      	ldr	r3, [r5, #0]
 800494c:	1d1a      	adds	r2, r3, #4
 800494e:	602a      	str	r2, [r5, #0]
 8004950:	681d      	ldr	r5, [r3, #0]
 8004952:	6862      	ldr	r2, [r4, #4]
 8004954:	2100      	movs	r1, #0
 8004956:	4628      	mov	r0, r5
 8004958:	f7fb fc5a 	bl	8000210 <memchr>
 800495c:	b108      	cbz	r0, 8004962 <_printf_i+0x1ea>
 800495e:	1b40      	subs	r0, r0, r5
 8004960:	6060      	str	r0, [r4, #4]
 8004962:	6863      	ldr	r3, [r4, #4]
 8004964:	6123      	str	r3, [r4, #16]
 8004966:	2300      	movs	r3, #0
 8004968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800496c:	e7aa      	b.n	80048c4 <_printf_i+0x14c>
 800496e:	6923      	ldr	r3, [r4, #16]
 8004970:	462a      	mov	r2, r5
 8004972:	4649      	mov	r1, r9
 8004974:	4640      	mov	r0, r8
 8004976:	47d0      	blx	sl
 8004978:	3001      	adds	r0, #1
 800497a:	d0ad      	beq.n	80048d8 <_printf_i+0x160>
 800497c:	6823      	ldr	r3, [r4, #0]
 800497e:	079b      	lsls	r3, r3, #30
 8004980:	d413      	bmi.n	80049aa <_printf_i+0x232>
 8004982:	68e0      	ldr	r0, [r4, #12]
 8004984:	9b03      	ldr	r3, [sp, #12]
 8004986:	4298      	cmp	r0, r3
 8004988:	bfb8      	it	lt
 800498a:	4618      	movlt	r0, r3
 800498c:	e7a6      	b.n	80048dc <_printf_i+0x164>
 800498e:	2301      	movs	r3, #1
 8004990:	4632      	mov	r2, r6
 8004992:	4649      	mov	r1, r9
 8004994:	4640      	mov	r0, r8
 8004996:	47d0      	blx	sl
 8004998:	3001      	adds	r0, #1
 800499a:	d09d      	beq.n	80048d8 <_printf_i+0x160>
 800499c:	3501      	adds	r5, #1
 800499e:	68e3      	ldr	r3, [r4, #12]
 80049a0:	9903      	ldr	r1, [sp, #12]
 80049a2:	1a5b      	subs	r3, r3, r1
 80049a4:	42ab      	cmp	r3, r5
 80049a6:	dcf2      	bgt.n	800498e <_printf_i+0x216>
 80049a8:	e7eb      	b.n	8004982 <_printf_i+0x20a>
 80049aa:	2500      	movs	r5, #0
 80049ac:	f104 0619 	add.w	r6, r4, #25
 80049b0:	e7f5      	b.n	800499e <_printf_i+0x226>
 80049b2:	bf00      	nop
 80049b4:	08004d2d 	.word	0x08004d2d
 80049b8:	08004d3e 	.word	0x08004d3e

080049bc <__sflush_r>:
 80049bc:	898a      	ldrh	r2, [r1, #12]
 80049be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049c2:	4605      	mov	r5, r0
 80049c4:	0710      	lsls	r0, r2, #28
 80049c6:	460c      	mov	r4, r1
 80049c8:	d458      	bmi.n	8004a7c <__sflush_r+0xc0>
 80049ca:	684b      	ldr	r3, [r1, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	dc05      	bgt.n	80049dc <__sflush_r+0x20>
 80049d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	dc02      	bgt.n	80049dc <__sflush_r+0x20>
 80049d6:	2000      	movs	r0, #0
 80049d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049de:	2e00      	cmp	r6, #0
 80049e0:	d0f9      	beq.n	80049d6 <__sflush_r+0x1a>
 80049e2:	2300      	movs	r3, #0
 80049e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80049e8:	682f      	ldr	r7, [r5, #0]
 80049ea:	6a21      	ldr	r1, [r4, #32]
 80049ec:	602b      	str	r3, [r5, #0]
 80049ee:	d032      	beq.n	8004a56 <__sflush_r+0x9a>
 80049f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80049f2:	89a3      	ldrh	r3, [r4, #12]
 80049f4:	075a      	lsls	r2, r3, #29
 80049f6:	d505      	bpl.n	8004a04 <__sflush_r+0x48>
 80049f8:	6863      	ldr	r3, [r4, #4]
 80049fa:	1ac0      	subs	r0, r0, r3
 80049fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80049fe:	b10b      	cbz	r3, 8004a04 <__sflush_r+0x48>
 8004a00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a02:	1ac0      	subs	r0, r0, r3
 8004a04:	2300      	movs	r3, #0
 8004a06:	4602      	mov	r2, r0
 8004a08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a0a:	6a21      	ldr	r1, [r4, #32]
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	47b0      	blx	r6
 8004a10:	1c43      	adds	r3, r0, #1
 8004a12:	89a3      	ldrh	r3, [r4, #12]
 8004a14:	d106      	bne.n	8004a24 <__sflush_r+0x68>
 8004a16:	6829      	ldr	r1, [r5, #0]
 8004a18:	291d      	cmp	r1, #29
 8004a1a:	d82b      	bhi.n	8004a74 <__sflush_r+0xb8>
 8004a1c:	4a29      	ldr	r2, [pc, #164]	; (8004ac4 <__sflush_r+0x108>)
 8004a1e:	410a      	asrs	r2, r1
 8004a20:	07d6      	lsls	r6, r2, #31
 8004a22:	d427      	bmi.n	8004a74 <__sflush_r+0xb8>
 8004a24:	2200      	movs	r2, #0
 8004a26:	6062      	str	r2, [r4, #4]
 8004a28:	04d9      	lsls	r1, r3, #19
 8004a2a:	6922      	ldr	r2, [r4, #16]
 8004a2c:	6022      	str	r2, [r4, #0]
 8004a2e:	d504      	bpl.n	8004a3a <__sflush_r+0x7e>
 8004a30:	1c42      	adds	r2, r0, #1
 8004a32:	d101      	bne.n	8004a38 <__sflush_r+0x7c>
 8004a34:	682b      	ldr	r3, [r5, #0]
 8004a36:	b903      	cbnz	r3, 8004a3a <__sflush_r+0x7e>
 8004a38:	6560      	str	r0, [r4, #84]	; 0x54
 8004a3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a3c:	602f      	str	r7, [r5, #0]
 8004a3e:	2900      	cmp	r1, #0
 8004a40:	d0c9      	beq.n	80049d6 <__sflush_r+0x1a>
 8004a42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a46:	4299      	cmp	r1, r3
 8004a48:	d002      	beq.n	8004a50 <__sflush_r+0x94>
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	f7ff fbe2 	bl	8004214 <_free_r>
 8004a50:	2000      	movs	r0, #0
 8004a52:	6360      	str	r0, [r4, #52]	; 0x34
 8004a54:	e7c0      	b.n	80049d8 <__sflush_r+0x1c>
 8004a56:	2301      	movs	r3, #1
 8004a58:	4628      	mov	r0, r5
 8004a5a:	47b0      	blx	r6
 8004a5c:	1c41      	adds	r1, r0, #1
 8004a5e:	d1c8      	bne.n	80049f2 <__sflush_r+0x36>
 8004a60:	682b      	ldr	r3, [r5, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d0c5      	beq.n	80049f2 <__sflush_r+0x36>
 8004a66:	2b1d      	cmp	r3, #29
 8004a68:	d001      	beq.n	8004a6e <__sflush_r+0xb2>
 8004a6a:	2b16      	cmp	r3, #22
 8004a6c:	d101      	bne.n	8004a72 <__sflush_r+0xb6>
 8004a6e:	602f      	str	r7, [r5, #0]
 8004a70:	e7b1      	b.n	80049d6 <__sflush_r+0x1a>
 8004a72:	89a3      	ldrh	r3, [r4, #12]
 8004a74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a78:	81a3      	strh	r3, [r4, #12]
 8004a7a:	e7ad      	b.n	80049d8 <__sflush_r+0x1c>
 8004a7c:	690f      	ldr	r7, [r1, #16]
 8004a7e:	2f00      	cmp	r7, #0
 8004a80:	d0a9      	beq.n	80049d6 <__sflush_r+0x1a>
 8004a82:	0793      	lsls	r3, r2, #30
 8004a84:	680e      	ldr	r6, [r1, #0]
 8004a86:	bf08      	it	eq
 8004a88:	694b      	ldreq	r3, [r1, #20]
 8004a8a:	600f      	str	r7, [r1, #0]
 8004a8c:	bf18      	it	ne
 8004a8e:	2300      	movne	r3, #0
 8004a90:	eba6 0807 	sub.w	r8, r6, r7
 8004a94:	608b      	str	r3, [r1, #8]
 8004a96:	f1b8 0f00 	cmp.w	r8, #0
 8004a9a:	dd9c      	ble.n	80049d6 <__sflush_r+0x1a>
 8004a9c:	6a21      	ldr	r1, [r4, #32]
 8004a9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004aa0:	4643      	mov	r3, r8
 8004aa2:	463a      	mov	r2, r7
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	47b0      	blx	r6
 8004aa8:	2800      	cmp	r0, #0
 8004aaa:	dc06      	bgt.n	8004aba <__sflush_r+0xfe>
 8004aac:	89a3      	ldrh	r3, [r4, #12]
 8004aae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ab2:	81a3      	strh	r3, [r4, #12]
 8004ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ab8:	e78e      	b.n	80049d8 <__sflush_r+0x1c>
 8004aba:	4407      	add	r7, r0
 8004abc:	eba8 0800 	sub.w	r8, r8, r0
 8004ac0:	e7e9      	b.n	8004a96 <__sflush_r+0xda>
 8004ac2:	bf00      	nop
 8004ac4:	dfbffffe 	.word	0xdfbffffe

08004ac8 <_fflush_r>:
 8004ac8:	b538      	push	{r3, r4, r5, lr}
 8004aca:	690b      	ldr	r3, [r1, #16]
 8004acc:	4605      	mov	r5, r0
 8004ace:	460c      	mov	r4, r1
 8004ad0:	b913      	cbnz	r3, 8004ad8 <_fflush_r+0x10>
 8004ad2:	2500      	movs	r5, #0
 8004ad4:	4628      	mov	r0, r5
 8004ad6:	bd38      	pop	{r3, r4, r5, pc}
 8004ad8:	b118      	cbz	r0, 8004ae2 <_fflush_r+0x1a>
 8004ada:	6a03      	ldr	r3, [r0, #32]
 8004adc:	b90b      	cbnz	r3, 8004ae2 <_fflush_r+0x1a>
 8004ade:	f7ff f8ed 	bl	8003cbc <__sinit>
 8004ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0f3      	beq.n	8004ad2 <_fflush_r+0xa>
 8004aea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004aec:	07d0      	lsls	r0, r2, #31
 8004aee:	d404      	bmi.n	8004afa <_fflush_r+0x32>
 8004af0:	0599      	lsls	r1, r3, #22
 8004af2:	d402      	bmi.n	8004afa <_fflush_r+0x32>
 8004af4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004af6:	f7ff fb8b 	bl	8004210 <__retarget_lock_acquire_recursive>
 8004afa:	4628      	mov	r0, r5
 8004afc:	4621      	mov	r1, r4
 8004afe:	f7ff ff5d 	bl	80049bc <__sflush_r>
 8004b02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b04:	07da      	lsls	r2, r3, #31
 8004b06:	4605      	mov	r5, r0
 8004b08:	d4e4      	bmi.n	8004ad4 <_fflush_r+0xc>
 8004b0a:	89a3      	ldrh	r3, [r4, #12]
 8004b0c:	059b      	lsls	r3, r3, #22
 8004b0e:	d4e1      	bmi.n	8004ad4 <_fflush_r+0xc>
 8004b10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b12:	f7ff fb7e 	bl	8004212 <__retarget_lock_release_recursive>
 8004b16:	e7dd      	b.n	8004ad4 <_fflush_r+0xc>

08004b18 <__swhatbuf_r>:
 8004b18:	b570      	push	{r4, r5, r6, lr}
 8004b1a:	460c      	mov	r4, r1
 8004b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b20:	2900      	cmp	r1, #0
 8004b22:	b096      	sub	sp, #88	; 0x58
 8004b24:	4615      	mov	r5, r2
 8004b26:	461e      	mov	r6, r3
 8004b28:	da0d      	bge.n	8004b46 <__swhatbuf_r+0x2e>
 8004b2a:	89a3      	ldrh	r3, [r4, #12]
 8004b2c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004b30:	f04f 0100 	mov.w	r1, #0
 8004b34:	bf0c      	ite	eq
 8004b36:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004b3a:	2340      	movne	r3, #64	; 0x40
 8004b3c:	2000      	movs	r0, #0
 8004b3e:	6031      	str	r1, [r6, #0]
 8004b40:	602b      	str	r3, [r5, #0]
 8004b42:	b016      	add	sp, #88	; 0x58
 8004b44:	bd70      	pop	{r4, r5, r6, pc}
 8004b46:	466a      	mov	r2, sp
 8004b48:	f000 f848 	bl	8004bdc <_fstat_r>
 8004b4c:	2800      	cmp	r0, #0
 8004b4e:	dbec      	blt.n	8004b2a <__swhatbuf_r+0x12>
 8004b50:	9901      	ldr	r1, [sp, #4]
 8004b52:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004b56:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004b5a:	4259      	negs	r1, r3
 8004b5c:	4159      	adcs	r1, r3
 8004b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b62:	e7eb      	b.n	8004b3c <__swhatbuf_r+0x24>

08004b64 <__smakebuf_r>:
 8004b64:	898b      	ldrh	r3, [r1, #12]
 8004b66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b68:	079d      	lsls	r5, r3, #30
 8004b6a:	4606      	mov	r6, r0
 8004b6c:	460c      	mov	r4, r1
 8004b6e:	d507      	bpl.n	8004b80 <__smakebuf_r+0x1c>
 8004b70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b74:	6023      	str	r3, [r4, #0]
 8004b76:	6123      	str	r3, [r4, #16]
 8004b78:	2301      	movs	r3, #1
 8004b7a:	6163      	str	r3, [r4, #20]
 8004b7c:	b002      	add	sp, #8
 8004b7e:	bd70      	pop	{r4, r5, r6, pc}
 8004b80:	ab01      	add	r3, sp, #4
 8004b82:	466a      	mov	r2, sp
 8004b84:	f7ff ffc8 	bl	8004b18 <__swhatbuf_r>
 8004b88:	9900      	ldr	r1, [sp, #0]
 8004b8a:	4605      	mov	r5, r0
 8004b8c:	4630      	mov	r0, r6
 8004b8e:	f7ff fbb5 	bl	80042fc <_malloc_r>
 8004b92:	b948      	cbnz	r0, 8004ba8 <__smakebuf_r+0x44>
 8004b94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b98:	059a      	lsls	r2, r3, #22
 8004b9a:	d4ef      	bmi.n	8004b7c <__smakebuf_r+0x18>
 8004b9c:	f023 0303 	bic.w	r3, r3, #3
 8004ba0:	f043 0302 	orr.w	r3, r3, #2
 8004ba4:	81a3      	strh	r3, [r4, #12]
 8004ba6:	e7e3      	b.n	8004b70 <__smakebuf_r+0xc>
 8004ba8:	89a3      	ldrh	r3, [r4, #12]
 8004baa:	6020      	str	r0, [r4, #0]
 8004bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb0:	81a3      	strh	r3, [r4, #12]
 8004bb2:	9b00      	ldr	r3, [sp, #0]
 8004bb4:	6163      	str	r3, [r4, #20]
 8004bb6:	9b01      	ldr	r3, [sp, #4]
 8004bb8:	6120      	str	r0, [r4, #16]
 8004bba:	b15b      	cbz	r3, 8004bd4 <__smakebuf_r+0x70>
 8004bbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bc0:	4630      	mov	r0, r6
 8004bc2:	f000 f81d 	bl	8004c00 <_isatty_r>
 8004bc6:	b128      	cbz	r0, 8004bd4 <__smakebuf_r+0x70>
 8004bc8:	89a3      	ldrh	r3, [r4, #12]
 8004bca:	f023 0303 	bic.w	r3, r3, #3
 8004bce:	f043 0301 	orr.w	r3, r3, #1
 8004bd2:	81a3      	strh	r3, [r4, #12]
 8004bd4:	89a3      	ldrh	r3, [r4, #12]
 8004bd6:	431d      	orrs	r5, r3
 8004bd8:	81a5      	strh	r5, [r4, #12]
 8004bda:	e7cf      	b.n	8004b7c <__smakebuf_r+0x18>

08004bdc <_fstat_r>:
 8004bdc:	b538      	push	{r3, r4, r5, lr}
 8004bde:	4d07      	ldr	r5, [pc, #28]	; (8004bfc <_fstat_r+0x20>)
 8004be0:	2300      	movs	r3, #0
 8004be2:	4604      	mov	r4, r0
 8004be4:	4608      	mov	r0, r1
 8004be6:	4611      	mov	r1, r2
 8004be8:	602b      	str	r3, [r5, #0]
 8004bea:	f7fc fbde 	bl	80013aa <_fstat>
 8004bee:	1c43      	adds	r3, r0, #1
 8004bf0:	d102      	bne.n	8004bf8 <_fstat_r+0x1c>
 8004bf2:	682b      	ldr	r3, [r5, #0]
 8004bf4:	b103      	cbz	r3, 8004bf8 <_fstat_r+0x1c>
 8004bf6:	6023      	str	r3, [r4, #0]
 8004bf8:	bd38      	pop	{r3, r4, r5, pc}
 8004bfa:	bf00      	nop
 8004bfc:	2000027c 	.word	0x2000027c

08004c00 <_isatty_r>:
 8004c00:	b538      	push	{r3, r4, r5, lr}
 8004c02:	4d06      	ldr	r5, [pc, #24]	; (8004c1c <_isatty_r+0x1c>)
 8004c04:	2300      	movs	r3, #0
 8004c06:	4604      	mov	r4, r0
 8004c08:	4608      	mov	r0, r1
 8004c0a:	602b      	str	r3, [r5, #0]
 8004c0c:	f7fc fbdd 	bl	80013ca <_isatty>
 8004c10:	1c43      	adds	r3, r0, #1
 8004c12:	d102      	bne.n	8004c1a <_isatty_r+0x1a>
 8004c14:	682b      	ldr	r3, [r5, #0]
 8004c16:	b103      	cbz	r3, 8004c1a <_isatty_r+0x1a>
 8004c18:	6023      	str	r3, [r4, #0]
 8004c1a:	bd38      	pop	{r3, r4, r5, pc}
 8004c1c:	2000027c 	.word	0x2000027c

08004c20 <_sbrk_r>:
 8004c20:	b538      	push	{r3, r4, r5, lr}
 8004c22:	4d06      	ldr	r5, [pc, #24]	; (8004c3c <_sbrk_r+0x1c>)
 8004c24:	2300      	movs	r3, #0
 8004c26:	4604      	mov	r4, r0
 8004c28:	4608      	mov	r0, r1
 8004c2a:	602b      	str	r3, [r5, #0]
 8004c2c:	f7fc fbe6 	bl	80013fc <_sbrk>
 8004c30:	1c43      	adds	r3, r0, #1
 8004c32:	d102      	bne.n	8004c3a <_sbrk_r+0x1a>
 8004c34:	682b      	ldr	r3, [r5, #0]
 8004c36:	b103      	cbz	r3, 8004c3a <_sbrk_r+0x1a>
 8004c38:	6023      	str	r3, [r4, #0]
 8004c3a:	bd38      	pop	{r3, r4, r5, pc}
 8004c3c:	2000027c 	.word	0x2000027c

08004c40 <_init>:
 8004c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c42:	bf00      	nop
 8004c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c46:	bc08      	pop	{r3}
 8004c48:	469e      	mov	lr, r3
 8004c4a:	4770      	bx	lr

08004c4c <_fini>:
 8004c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4e:	bf00      	nop
 8004c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c52:	bc08      	pop	{r3}
 8004c54:	469e      	mov	lr, r3
 8004c56:	4770      	bx	lr
